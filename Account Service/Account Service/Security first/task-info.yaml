type: edu
custom_name: Security first!
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, String> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, String value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String paymentApi = "/api/empl/payment";
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();

      private final String jDShortPass1 = new TestReq().setProps("new_password", "o").toJson();
      private final String jDShortPass2 = new TestReq().setProps("new_password", "oM").toJson();
      private final String jDShortPass3 = new TestReq().setProps("new_password", "oMo").toJson();
      private final String jDShortPass4 = new TestReq().setProps("new_password", "oMoa").toJson();
      private final String jDShortPass5 = new TestReq().setProps("new_password", "oMoa3").toJson();
      private final String jDShortPass6 = new TestReq().setProps("new_password", "oMoa3V").toJson();
      private final String jDShortPass7 = new TestReq().setProps("new_password", "oMoa3Vv").toJson();
      private final String jDShortPass8 = new TestReq().setProps("new_password", "oMoa3Vvq").toJson();
      private final String jDShortPass9 = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDShortPass10 = new TestReq().setProps("new_password", "oMoa3Vvqno").toJson();
      private final String jDShortPass11 = new TestReq().setProps("new_password", "oMoa3VvqnoM").toJson();


      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() == 404) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Endpoint not found!" + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user, String answer) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", answer));
        }
        if (status == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", answer)
                          .value("path", "/api/auth/changepass")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + getPrettyJson(json) + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
              // Test user registration on signup api
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"),
              () -> testPostSignUpResponse(jDCorrectUser, 200),
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(jDCorrectUser),
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMusLower, 200),
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"),
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMusLower, 200, "User must login!"),
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),
              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
              () -> testChangePassword(changePassApi, jDShortPass1, 400, jDCorrectUser,
                      "Password length must be 12 chars minimum!"),
              () -> testChangePassword(changePassApi, jDDuplicatePass, 400, jDCorrectUser,
                      "The passwords must be different!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass1, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass2, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass3, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass4, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass5, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass6, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass7, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass8, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass9, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass10, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass11, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"),
              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"JohnDoe@acme.com",
                      "oMoa3VvqnLxW", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"JohnDoe@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!"),
              () -> testChangePassword(changePassApi, jDPass, 200, maxMusCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"MaxMustermann@acme.com",
                      "ai0y9bMvyF6G", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"MaxMustermann@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!")
      };
    }
  learner_created: false
- name: src/account/repositories/PaymentRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Payment;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface PaymentRepository extends JpaRepository<Payment, Long> {

    }
  learner_created: true
- name: src/account/config/AccountServiceUserDetailsService.java
  visible: true
  text: |
    package account.config;

    public class AccountServiceUserDetailsService {
    }
  learner_created: true
- name: src/account/errors/UserException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;


    public class UserException extends RuntimeException {
        private String error;
        private HttpStatus status;


        public UserException(String error) {
            this.error = error;
            this.status = HttpStatus.BAD_REQUEST;
        }

        public UserException(String error, HttpStatus status) {
            this.error = error;
            this.status = status;
        }

        public HttpStatus getStatus() {
            return status;
        }

        public void setStatus(HttpStatus status) {
            this.status = status;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

    }
  learner_created: true
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.domain.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            username = user.getEmail().toLowerCase();
            password = user.getPassword();
            rolesAndAuthorities = List.of(new SimpleGrantedAuthority(user.getRoles().toString()));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        // 4 remaining methods that just return true
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/errors/UserExistsException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;

    public class UserExistsException extends UserException{

        @Override
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        String message;
        public UserExistsException(String error, HttpStatus status, String message) {
            super(error, status);
            this.message = message;
        }

    }
  learner_created: true
- name: src/account/config/WebSecurityConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.beans.factory.annotation.Autowired;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;

    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private UserDetailsService userDetailsService;

        @Autowired
        private PasswordEncoder passwordEncoder;

        @Autowired
        public WebSecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
        }
        @Override
        public void configure(HttpSecurity http) throws Exception {

            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers(HttpMethod.POST, "/api/signup").permitAll()
                    .mvcMatchers(HttpMethod.POST,"/api/empl").authenticated()
                    // other matchers
                    //.anyRequest().authenticated() // all other requests must be authenticated
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }




        @Bean
        public DaoAuthenticationProvider authenticationProvider(){
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(passwordEncoder);
            provider.setUserDetailsService(userDetailsService);
            return provider;
        }

    }
  learner_created: true
- name: src/account/services/PaymentService.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;

    public interface PaymentService {
        User getEmployee();
    }
  learner_created: true
- name: src/account/controllers/UserController.java
  visible: true
  text: |
    package account.controllers;


    import account.domain.User;
    import account.services.UserServiceImpl;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @CrossOrigin(origins = "http://localhost:28852")
    @RestController
    @RequestMapping("/api")
    @Tag(name = "User", description = "User API")
    public class UserController {

        private final UserServiceImpl userService;

        public UserController(UserServiceImpl userService) {
            this.userService = userService;
        }

        @Operation(summary = "Get all Users", description = "Get all Users, available or not", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping()
        public List<User> getAllUsers() {
            return userService.findAllUsers();
        }

        @Operation(summary = "Get a User by id", description = "Get a User by id", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/{id}")
        public User getUserById(@PathVariable Long id) {
            return userService.findUserById(id);
        }

        @Operation(summary = "Get a User by name", description = "Get a User by name", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/name/{name}")
        public List<User> getUserByName(@PathVariable String name) {
            return userService.findUsersByName(name);
        }

        @Operation(summary = "Create a User", description = "Create a User", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/signup")
        public User createUser(@RequestBody User User) {
            return userService.saveUser(User);
        }

        @Operation(summary = "Update a User", description = "Update a User", tags = {
                "User" })
        @ApiResponse(responseCode = "204", description = "OK")
        @PutMapping("/{id}")
        public User updateUser(@PathVariable Long id, @RequestBody User User) {
            return userService.updateUser(id, User);
        }
        @Operation(summary = "Delete a User", description = "Delete a User by id", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "No content")
        @DeleteMapping("/{id}")
        public void deleteUser(@PathVariable Long id) {
            userService.deleteUserById(id);
        }

        @Operation(summary = "Delete a User", description = "Delete a User", tags = {
                "User" })
        @ApiResponse(responseCode = "204", description = "No content")
        @DeleteMapping()

        public ResponseEntity<?> deleteUser(@RequestBody User User) {
            userService.deleteUser(User);
            return ResponseEntity.noContent().build();
        }

        @Operation(summary = "Get a User by email", description = "Get a User by email", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/email/{email}")
        public ResponseEntity<User> getUserByEmail(@PathVariable String email) {
            return ResponseEntity.ok(userService.findUserByEmail(email));
        }

        @GetMapping("/empl/payment")
        public ResponseEntity<User> getPayment(@Valid @AuthenticationPrincipal UserDetails userDetails) {
            if (userDetails == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
            }
            return ResponseEntity.ok(userService.findUserByEmail(userDetails.getUsername()));
        }

    }
  learner_created: true
- name: src/account/services/UserService.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;

    import java.util.List;

    public interface UserService {
        List<User> findAllUsers();

        User findUserById(Long id);

        User findUserByEmail(String email);

        List<User> findUsersByName(String name);

        User saveUser(User User);

        User updateUser(Long id, User User);

        void deleteUserById(Long id);

        void deleteUser(User User);
    }
  learner_created: true
- name: src/account/services/UserServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.errors.UserException;
    import account.errors.UserExistsException;
    import account.repositories.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import javax.validation.ConstraintViolation;
    import javax.validation.Validator;
    import java.util.List;
    import java.util.Set;

    @Service
    public class UserServiceImpl implements UserService{

        @Autowired
        private Validator validator;

        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PasswordEncoder passwordEncoder;

        /**
         * Construct UserService
         *
         * @param validator         Validator that enforce entities' constraints
         * @param userRepository    User Repository
         */


        /**
         * Get all Users from the database
         *
         * @return List of Users
         *
         */
        @Override
        public List<User> findAllUsers() {
            return userRepository.findAll();
        }

        /**
         * Find a user by id
         *
         * @param id the id of the User
         * @return the User
         * @throws UserException if the User is not found
         *
         */
        @Override
        public User findUserById(Long id) {
            return userRepository.findById(id).orElseThrow(() -> new UserException("User not found"));
        }

        @Override
        public User findUserByEmail(String email) {
            return userRepository.findByEmail(email).orElseThrow(() -> new UserException("User not found"));
        }

        /**
         * Find all the users by name containing the given string
         *
         * @param name the name of the user
         * @return the list of users
         *
         */
        @Override
        public List<User> findUsersByName(String name) {
            return userRepository.findByNameContaining(name);
        }

        /**
         * Save a User to the database
         *
         * @param user     the name of the User
         * @return User
         *
         */

        // TODO: Should create an UserDto

        @Override
        public User saveUser(User user) {
            // TODO: should check if there's a query for searching strings without caring about case
            boolean alreadyRegisteredEmail = userRepository.findByEmail(user.getEmail().toLowerCase()).isPresent();
            Set<ConstraintViolation<User>> violations = validator.validate(user);
            if (!violations.isEmpty() || alreadyRegisteredEmail) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "User exist!");
            }
    //        if (!user.getEmail().endsWith("@acme.com")) {
    //            throw new UserException("User email must end with @acme.com", HttpStatus.BAD_REQUEST);
    //        }
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            user.setEmail(user.getEmail().toLowerCase());


            return userRepository.save(user);
        }

        /**
         * Update a User
         *
         * @param id        the id of the User     *
         * @param user user     *
         * @return User
         */
        @Override
        public User updateUser(Long id, User user) {
            User _user = userRepository.findById(id)
                    .orElseThrow(() -> new UserException("User not found"));

            _user.setName(user.getName());
            _user.setLastname(user.getLastname());
            _user.setEmail(user.getEmail());
            _user.setPassword(user.getPassword());

            return userRepository.save(_user);
        }

        /**
         * Delete a User
         *
         * @param id the id of the User
         *
         */
        @Override
        public void deleteUserById(Long id) {
            userRepository.deleteById(id);
        }

        /**
         * Delete a User
         *
         * @param user user
         *
         */
        @Override
        public void deleteUser(User user) {
            userRepository.delete(user);
        }

    }
  learner_created: true
- name: src/account/services/PaymentServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.repositories.PaymentRepository;
    import account.repositories.UserRepository;
    import org.springframework.stereotype.Service;

    @Service
    public class PaymentServiceImpl implements PaymentService {


        final private PaymentRepository paymentRepository;
        final private UserRepository userRepository;

        public PaymentServiceImpl(PaymentRepository paymentRepository, UserRepository userRepository) {
            this.paymentRepository = paymentRepository;
            this.userRepository = userRepository;
        }

        @Override
        public User getEmployee() {
            return null;
        }
    }
  learner_created: true
- name: src/account/domain/User.java
  visible: true
  text: |
    package account.domain;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.List;

    @Entity
    @Table(name = "security_user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;
        @NotEmpty(message = "Name is required")
        @Column(name = "name", nullable = false)
        private String name;

        @NotEmpty(message = "Last name is required")
        @Column(name = "last_name", nullable = false)
        private String lastname;

    //    @Email(regexp = ".*@acme\\.com",message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Column(name = "email", nullable = false, unique = true)
        private String email;

        // @Size (min = 8, message = "Password must be at least 8 characters")
        @NotEmpty(message = "Password is required")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password", nullable = false)
        private String password;

        @JsonIgnore
        @Column(name = "role", nullable = false)
        @ManyToMany(fetch = FetchType.EAGER)
        List<Role> roles;
        protected User() {

        }

        public User(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public User(String name, String lastName, String email, String password, List<Role> roles) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.roles = roles;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRoles() {
            return roles;
        }

        public void setRoles(List<Role> roles) {
            this.roles = roles;
        }
    }
  learner_created: true
- name: src/account/config/BCryptEncoderConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    public class BCryptEncoderConfig {
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(14);
        }
    }
  learner_created: true
- name: src/account/errors/ErrorResponse.java
  visible: true
  text: |+
    package account.errors;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class ErrorResponse {
        private String timestamp;

        private int status;

        private String error;

        private String path;

        private String message;

        public ErrorResponse(String timestamp, int status, String error, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.path = path;
        }

        public ErrorResponse(String timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }


        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

  learner_created: true
- name: src/account/errors/CustomControllerAdvice.java
  visible: true
  text: |
    package account.errors;

    import org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException;
    import org.springframework.dao.DataIntegrityViolationException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;
    import org.springframework.web.context.request.WebRequest;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.ConstraintViolationException;
    import java.time.LocalDateTime;

    @RestControllerAdvice
    public class CustomControllerAdvice {

        int status;
        String timestamp;
        String path;
        String message;


    //    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    //    @ExceptionHandler(RuntimeException.class)
    //    public ResponseEntity<ErrorResponse> handleBadCredentialsException(
    //            UserExistsException e, HttpServletRequest request) {
    //
    //        status = e.getStatus().value();
    //        timestamp = LocalDateTime.now().toString();
    //        message = e.getMessage();
    //        path = request.getServletPath();
    //
    //        return new ResponseEntity<>(
    //                new ErrorResponse(
    //                        timestamp,
    //                        status,
    //                        e.getError(),
    //                        "",
    //                        path)
    //                , e.getStatus()
    //        );
    //    }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(UserExistsException.class)
        public ResponseEntity<ErrorResponse> handleUserExistsException(
                UserExistsException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            message,
                            path)
                    , e.getStatus()
            );
        }


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(RuntimeException.class)
        public ResponseEntity<ErrorResponse> handleUserExceptions(
                UserException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
                    );
        }

        @ExceptionHandler(Exception.class) // exception handled
        public ResponseEntity<ErrorResponse> handleExceptions(
                UserException e, HttpServletRequest request) {
            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getContextPath();
            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
            );
        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.User;

    import io.swagger.v3.oas.annotations.tags.Tag;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;
    import org.springframework.data.rest.core.annotation.RestResource;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    @Tag(name = "User", description = "User API")
    public interface UserRepository extends JpaRepository<User, Long> {

        /**
         *
         * Find all Users from the database
         *
         */
        List<User> findAll();

        /**
         * Find a user by id
         *
         * @param id the id of the user
         * @return the user
         */

        Optional<User> findById(@Param("id") long id);

        /**
         * Find all the users by name containing the given string
         *
         * @param name the name of the user
         * @return the list of users
         */
        List<User> findByNameContaining(@Param("name") String name);

        /**
         * Save a user
         *
         * @param User the user to save
         * @return the saved user
         */

        @Override
    //     @RestResource(exported = false)
        <S extends User> S save(S User);

        @Override
        @RestResource(exported = false)
        <S extends User> List<S> saveAll(Iterable<S> users);

        // @RestResource(exported = false)
        void deleteById(long id);

        @Override
    //    @RestResource(exported = false)
        void delete(User user);

        @Override
        @RestResource(exported = false)
        void deleteAll(Iterable<? extends User> users);

    //    @Query("SELECT u FROM User u WHERE u.email = :email")
        Optional<User> findByEmail(String email);
    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(
                HttpServletRequest request,
                HttpServletResponse response,
                AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, " "
            );
        }
    }
  learner_created: true
- name: src/account/services/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.config.UserDetailsImpl;
    import account.domain.User;
    import account.repositories.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.logging.Logger;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        final UserRepository userRepository;

        Logger logger = Logger.getLogger(UserDetailsServiceImpl.class.getName());

        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }
        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            logger.info("loadUserByUsername: " + username);
            User user = userRepository.findByEmail(username.toLowerCase())
                    .orElseThrow(() -> new UsernameNotFoundException("Not found: " + username));

            return new UserDetailsImpl(user);
        }

    }
  learner_created: true
- name: src/account/domain/Role.java
  visible: true
  text: |-
    package account.domain;

    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;
    import java.io.Serial;

    @Entity
    @Table(name = "security_role")
    public class Role implements GrantedAuthority {
        @Serial
        private static final long serialVersionUID = 1L;
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column(name = "role_name")
        private String roleName;
        @Column(name = "role_description")
        private String description;

        protected Role() {

        }

        public Role(String description, String roleName) {
            this.description = description;
            this.roleName = roleName;
        }

        @Override
        public String getAuthority() {
            return roleName;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }
        public String getRoleName() {
            return roleName;
        }

        public void setRoleName(String roleName) {
            this.roleName = roleName;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

    }
  learner_created: true
- name: src/account/domain/Payment.java
  visible: true
  text: |
    package account.domain;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;
    @Entity
    @Table(name = "payments")
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;
        @ManyToOne
        @JoinColumn(name = "user_id")
        @NotNull(message = "employee email must not be empty")
        private User employee;


        public Payment(Long id, User employee) {
            this.id = id;
            this.employee = employee;
        }

        protected Payment() {
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public User getEmployee() {
            return employee;
        }

        public void setEmployee(User employee) {
            this.employee = employee;
        }
    }
  learner_created: true
- name: src/account/utils/SecurityChecker.java
  visible: true
  learner_created: true
- name: src/account/utils/UserMapper.java
  visible: true
  learner_created: true
- name: src/account/dto/UserDto.java
  visible: true
  learner_created: true
- name: src/account/dto/ChangePasswordDto.java
  visible: true
  learner_created: true
- name: src/account/dto/ResponseBody.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16603#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 26 Feb 2023 06:49:54 UTC"
record: 3

type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String adminApi = "/api/admin/user/";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");
      private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Hoe")
              .setProps("email", "IvanHoe@acme.com")
              .setProps("password", "nWza98hjkLPE");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String ivanHoeCorrectUser = ivanHoe.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 654321).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 21).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson()
      });
      private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson()});
      private final String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson();
      private final String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private final String correctPaymentResponseIvanov = convert(new String[]{
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
      });
      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String thirdResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").
                      setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
      });
      private final String fourthResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                      .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }


      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);

        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for check the prohibition of requests specified types
       *
       * @param api testing api (String)
       * @param deniedMethods list of prohibited type requests
       * @param body string representation of body content in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {

        HttpRequest getReq = get(api);
        HttpRequest postReq = post(api, body);
        HttpRequest putReq = put(api, body);
        HttpRequest deleteReq = delete(api);

        Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
          put("get", getReq);
          put("post", postReq);
          put("put", putReq);
          put("delete", deleteReq);
        }};

        for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
          if (deniedMethods.contains(entry.getKey())) {
            HttpResponse response = entry.getValue().send();
            if (response.getStatusCode() != 405) {
              return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                      "405, responded: " + response.getStatusCode());
            }
          }
        }
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();


        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (responseJson.size() != correctJson.size())  {
          return CheckResult.wrong("Wrong dataa in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }


        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }
            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }


      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Testing user registration negative tests
              () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
              () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
              () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
              () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
              () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
              () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
              () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
              () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
              () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
              () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
              () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                      "Sending password from breached list"), // 11

              // Testing user registration positive tests
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15

    //          // Testing user registration negative tests
              () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
              () -> testUserDuplicates(jDCorrectUser), // 17
              () -> testApi(null, jDLower, 400, signUpApi, "POST",
                      "User must be unique (ignorecase)!"), // 18

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 24
    //
    //          // Testing changing password
              () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                      "This api only for authenticated user"), // 25
              () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                      "The password length must be at least 12 chars!"), // 26
              () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                      "The passwords must be different!"), // 27
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 28
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                      "Password must be changed!"), // 30
              () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                      "Password must be changed!"), // 31

              // Testing persistence
              () -> restartApplication(), // 32
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 33

              // Testing admin functions
              // Delete user
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                      "Api must be available only to admin user"), // 34
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                      "Api must be available only to admin user"), // 35
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"), // 36
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 38
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                      jDNewPass, "johndoe@acme.com",
                      "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                      jDNewPass, "johndoe@goole.com",
                      "User not found!", "Trying to delete non existing user"), // 40
              () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
              () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44

              // Testing persistence
              () -> restartApplication(), // 45
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 46



              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      thirdResponseAdminApi, "Role must be changed!"), // 48
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, ""),
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "Role must be changed!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),

              // Testing admin functions, negative tests
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                      new String[] {"Role not found!"}, "Trying add not existing role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "USER", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add business role to administrator!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "ADMINISTRATOR", "REMOVE",
                      new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "USER", "REMOVE",
                      new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"User not found!"}, "Trying remove role from non existing user!"),

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"),
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),

              // Testing business logic
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };

    }
  learner_created: false
- name: src/account/dto/ChangePasswordDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;

    public class ChangePasswordDto {
        @JsonProperty("new_password")
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        private String password;

        public ChangePasswordDto() {
        }

        public ChangePasswordDto(String password) {
            this.password = password;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }


    }
  learner_created: true
- name: src/account/errors/UserException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;


    public class UserException extends RuntimeException {
        private String error;
        private HttpStatus status;


        public UserException(String error) {
            this.error = error;
            this.status = HttpStatus.BAD_REQUEST;
        }

        public UserException(String error, HttpStatus status) {
            this.error = error;
            this.status = status;
        }

        public HttpStatus getStatus() {
            return status;
        }

        public void setStatus(HttpStatus status) {
            this.status = status;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

    }
  learner_created: true
- name: src/resources/banner.txt
  visible: true
  text: "-------------------------------------------------------------------------------------------------------\n\
    If you're seeing this code through Hyperskill, follow me on GitHub to see more\
    \ projects like this one!\n\n ██████  ██ ████████ ██   ██ ██    ██ ██████    \
    \     ███████  █████  ██████  ██    ██ ██  ██████ \n██       ██    ██    ██  \
    \ ██ ██    ██ ██   ██ ██     ██      ██   ██ ██   ██ ██    ██ ██ ██      \n██\
    \   ███ ██    ██    ███████ ██    ██ ██████         █████   ███████ ██████  ██\
    \    ██ ██ ██      \n██    ██ ██    ██    ██   ██ ██    ██ ██   ██ ██     ██ \
    \     ██   ██ ██   ██  ██  ██  ██ ██      \n ██████  ██    ██    ██   ██  ████\
    ██  ██████         ██      ██   ██ ██   ██   ████   ██  ██████\n  \nGitHub: https://github.com/farvic\n\
    LinkedIn: https://www.linkedin.com/in/victorfa/\n-------------------------------------------------------------------------------------------------------"
  learner_created: true
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.domain.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            username = user.getEmail().toLowerCase();
            password = user.getPassword();
            rolesAndAuthorities = List.of(new SimpleGrantedAuthority(user.getRoles().toString()));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        // 4 remaining methods that just return true
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/errors/UserExistsException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;

    public class UserExistsException extends UserException{

        @Override
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        String message;
        public UserExistsException(String error, HttpStatus status, String message) {
            super(error, status);
            this.message = message;
        }

    }
  learner_created: true
- name: src/account/utils/YearMonthConverter.java
  visible: true
  text: |
    package account.utils;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;

    public class YearMonthConverter {
        public static YearMonth convert(String input) {
            String formattedInput = input;
            if (input.matches("\\d{4}-\\d{2}")) {
                formattedInput = input.substring(5) + "-" + input.substring(0, 4);
            }
            return YearMonth.parse(formattedInput, DateTimeFormatter.ofPattern("MM-yyyy"));
        }
    }
  learner_created: true
- name: src/account/controllers/UserController.java
  visible: true
  text: |
    package account.controllers;


    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.dto.UserDto;
    import account.services.UserServiceImpl;
    import account.utils.UserMapper;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    @CrossOrigin(origins = "http://localhost:28852")
    @RestController
    @RequestMapping("/api")
    @Tag(name = "User", description = "User API")
    public class UserController {

        private final UserServiceImpl userService;

        final Logger LOGGER = LoggerFactory.getLogger(UserController.class);

        public UserController(UserServiceImpl userService) {
            this.userService = userService;
        }

        @Operation(summary = "Create a User", description = "Create a User", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/signup")
        public User createUser(@Valid @RequestBody UserDto userDto) {

            User user = UserMapper.toEntity(userDto);

            return userService.saveUser(user);
        }

        @Operation(summary = "Change password", description = "Changes the user's password", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/changepass")
        public ResponseBody changePassword(@Valid @RequestBody ChangePasswordDto changePasswordDto, @AuthenticationPrincipal UserDetails userDetails) {
            return userService.changePassword(changePasswordDto, userDetails);
        }

    //    @Operation(summary = "Update a User", description = "Update a User", tags = {
    //            "User" })
    //    @ApiResponse(responseCode = "204", description = "OK")
    //    @PutMapping("/{id}")
    //    public User updateUser(@PathVariable Long id, @RequestBody User User) {
    //        return userService.updateUser(id, User);
    //    }

        @Operation(summary = "Delete a User", description = "Delete a User by id", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "No content")
        @DeleteMapping("/{id}")
        public void deleteUser(@PathVariable Long id) {
            userService.deleteUserById(id);
        }

        @Operation(summary = "Get a User by email", description = "Get a User by email", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/email/{email}")
        public ResponseEntity<User> getUserByEmail(@PathVariable String email) {
            return ResponseEntity.ok(userService.findUserByEmail(email));
        }


    }
  learner_created: true
- name: src/account/dto/PaymentDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import java.time.YearMonth;

    public class PaymentDto {

        private String name;

        private String lastname;

        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MMMM-yyyy", locale = "en")
        @JsonSerialize(using = YearMonthSerializer.class)
        @JsonDeserialize(using = YearMonthDeserializer.class)
        private YearMonth period;
        private String salary;

        public PaymentDto() {
        }

        public PaymentDto(String name, String lastname, YearMonth period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }


        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }
    }
  learner_created: true
- name: src/account/utils/SecurityChecker.java
  visible: true
  text: |
    package account.utils;

    import java.util.ArrayList;
    import java.util.List;

    public class SecurityChecker {

        private static final List<String> breachedPasswords = new ArrayList<>();

        static {
            breachedPasswords.addAll(
                    List.of(
                            "PasswordForJanuary",
                            "PasswordForFebruary",
                            "PasswordForMarch",
                            "PasswordForApril",
                            "PasswordForMay",
                            "PasswordForJune",
                            "PasswordForJuly",
                            "PasswordForAugust",
                            "PasswordForSeptember",
                            "PasswordForOctober",
                            "PasswordForNovember",
                            "PasswordForDecember"
                    )
            );
        }

        public static boolean isBreached(String password) {
            return breachedPasswords.contains(password);
        }

    }
  learner_created: true
- name: src/account/domain/User.java
  visible: true
  text: |
    package account.domain;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.*;
    import java.util.List;

    @Entity
    @Table(name = "security_user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;
        @NotEmpty(message = "Name is required")
        @Column(name = "name", nullable = false)
        private String name;

        @NotEmpty(message = "Last name is required")
        @Column(name = "last_name", nullable = false)
        private String lastname;

    //    @Email(regexp = ".*@acme\\.com",message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Column(name = "email", nullable = false, unique = true)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password", nullable = false)
        private String password;

        @JsonIgnore
        @Column(name = "role")
        @ManyToMany(fetch = FetchType.EAGER)
        List<Role> roles;
        public User() {

        }

        public User(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public User(String name, String lastName, String email, String password, List<Role> roles) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.roles = roles;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRoles() {
            return roles;
        }

        public void setRoles(List<Role> roles) {
            this.roles = roles;
        }

        @Override
        public String toString() {
            return "User{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", lastname='" + lastname + '\'' +
                    ", email='" + email + '\'' +
                    ", password='" + password + '\'' +
                    ", roles=" + roles +
                    '}';
        }
    }
  learner_created: true
- name: src/account/errors/CustomControllerAdvice.java
  visible: true
  text: |
    package account.errors;

    import com.fasterxml.jackson.databind.exc.MismatchedInputException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;
    import org.springframework.web.context.request.WebRequest;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.ConstraintViolationException;
    import java.time.DateTimeException;
    import java.time.LocalDateTime;

    @RestControllerAdvice
    public class CustomControllerAdvice {

        int status;
        String timestamp;
        String path;
        String message;


    //    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    //    @ExceptionHandler(RuntimeException.class)
    //    public ResponseEntity<ErrorResponse> handleBadCredentialsException(
    //            UserExistsException e, HttpServletRequest request) {
    //
    //        status = e.getStatus().value();
    //        timestamp = LocalDateTime.now().toString();
    //        message = e.getMessage();
    //        path = request.getServletPath();
    //
    //        return new ResponseEntity<>(
    //                new ErrorResponse(
    //                        timestamp,
    //                        status,
    //                        e.getError(),
    //                        "",
    //                        path)
    //                , e.getStatus()
    //        );
    //    }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(DateTimeException.class)
        public ResponseEntity<ErrorResponse> dateInputException(
                DateTimeException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MismatchedInputException.class)
        public ResponseEntity<ErrorResponse> mismatchedInputException(
                MismatchedInputException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<ErrorResponse> methodNotValidException(
                MethodArgumentNotValidException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getFieldError().getDefaultMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(UserExistsException.class)
        public ResponseEntity<ErrorResponse> handleUserExistsException(
                UserExistsException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            message,
                            path)
                    , e.getStatus()
            );
        }


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(RuntimeException.class)
        public ResponseEntity<ErrorResponse> handleUserExceptions(
                UserException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
                    );
        }

        @ExceptionHandler(Exception.class) // exception handled
        public ResponseEntity<ErrorResponse> handleExceptions(
                UserException e, HttpServletRequest request) {
            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getContextPath();
            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
            );
        }
    }
  learner_created: true
- name: src/account/controllers/PaymentController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.services.PaymentServiceImpl;
    import account.dto.ResponseBody;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    import java.util.List;

    @RestController
    @RequestMapping("/api")
    public class PaymentController {

        private final PaymentServiceImpl paymentService;

        public PaymentController(PaymentServiceImpl paymentService) {
            this.paymentService = paymentService;
        }


        @GetMapping("/empl/payment")
        public ResponseEntity<?> getPayments(
                @RequestParam(value = "period", required = false) String period,
                @AuthenticationPrincipal UserDetails userDetails)
        {

            List<PaymentDto> payments = paymentService.getPayments(period, userDetails);
            if (period != null)
                return ResponseEntity.ok(payments.get(0));
            else
                return ResponseEntity.ok(payments);
        }


        @PostMapping("/acct/payments")
        public ResponseEntity<ResponseBody> postPayment(@Valid @RequestBody List<PaymentRequest> paymentRequest) {
            ResponseBody responseBody = paymentService.postPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

        @PutMapping("/acct/payments")
        public ResponseEntity<ResponseBody> putPayment(@Valid @RequestBody  PaymentRequest paymentRequest) {
            ResponseBody responseBody = paymentService.putPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(
                HttpServletRequest request,
                HttpServletResponse response,
                AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, " "
            );
        }
    }
  learner_created: true
- name: src/account/utils/PaymentUtils.java
  visible: true
  text: |
    package account.utils;
    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import java.util.ArrayList;
    import java.util.List;

    public class PaymentUtils {

        public static List<PaymentDto> mapPaymentsToPaymentDtos(List<Payment> payments, User employee) {
            List<PaymentDto> paymentDtos = new ArrayList<>();
            for (Payment payment : payments) {
                PaymentDto paymentDto = new PaymentDto();
                paymentDto.setName(employee.getName());
                paymentDto.setLastname(employee.getLastname());
                paymentDto.setPeriod(payment.getPeriod());
                paymentDto.setSalary(formatSalary(payment.getSalary()));
                paymentDtos.add(paymentDto);
            }
            paymentDtos.sort((o1, o2) -> o2.getPeriod().compareTo(o1.getPeriod()));
            return paymentDtos;
        }

        private static String formatSalary(long salary) {
            long dollars = salary / 100;
            long cents = salary % 100;
            return String.format("%d dollar(s) %02d cent(s)", dollars, cents);
        }
    }
  learner_created: true
- name: src/account/services/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.config.UserDetailsImpl;
    import account.domain.User;
    import account.repositories.UserRepository;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.logging.Logger;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        final UserRepository userRepository;

        Logger logger = Logger.getLogger(UserDetailsServiceImpl.class.getName());

        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }
        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            logger.info("loadUserByUsername: " + username);
            User user = userRepository.findByEmail(username.toLowerCase())
                    .orElseThrow(() -> new UsernameNotFoundException("Not found: " + username));

            return new UserDetailsImpl(user);
        }

    }
  learner_created: true
- name: src/account/domain/Role.java
  visible: true
  text: |-
    package account.domain;

    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;
    import java.io.Serial;

    @Entity
    @Table(name = "security_role")
    public class Role implements GrantedAuthority {
        @Serial
        private static final long serialVersionUID = 1L;
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column(name = "role_name")
        private String roleName;
        @Column(name = "role_description")
        private String description;

        protected Role() {

        }

        public Role(String description, String roleName) {
            this.description = description;
            this.roleName = roleName;
        }

        @Override
        public String getAuthority() {
            return roleName;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }
        public String getRoleName() {
            return roleName;
        }

        public void setRoleName(String roleName) {
            this.roleName = roleName;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

    }
  learner_created: true
- name: src/account/utils/UserMapper.java
  visible: true
  text: |
    package account.utils;

    import account.domain.User;
    import account.dto.UserDto;
    import org.springframework.stereotype.Component;


    @Component
    public class UserMapper {
        public static UserDto toDto(User user) {
            UserDto userDto = new UserDto();
            userDto.setName(user.getName());
            userDto.setLastname(user.getLastname());
            userDto.setEmail(user.getEmail());
            userDto.setPassword(user.getPassword());
            userDto.setRoles(user.getRoles());
            return userDto;
        }

        public static User toEntity(UserDto userDto) {
            User user = new User();
            user.setName(userDto.getName());
            user.setLastname(userDto.getLastname());
            user.setPassword(userDto.getPassword());
            user.setEmail(userDto.getEmail());
            user.setRoles(userDto.getRoles());
            return user;
        }
    }
  learner_created: true
- name: src/account/repositories/PaymentRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Payment;
    import org.springframework.data.jpa.repository.JpaRepository;

    import java.time.YearMonth;
    import java.util.List;
    import java.util.Optional;

    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        List<Payment> findAllByEmployee(String employee);
        Optional<Payment> findByEmployeeAndPeriod(String employee, YearMonth period);
    }
  learner_created: true
- name: src/account/config/AccountServiceUserDetailsService.java
  visible: true
  text: |
    package account.config;

    public class AccountServiceUserDetailsService {
    }
  learner_created: true
- name: src/account/utils/PaymentId.java
  visible: true
  text: |
    package account.utils;

    import java.io.Serializable;
    import java.time.YearMonth;
    import java.util.Objects;

    public class PaymentId implements Serializable {

        private String employee;

        private YearMonth period;

        public PaymentId() {
        }

        public PaymentId(String employee, YearMonth period) {
            this.employee = employee;
            this.period = period;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PaymentId paymentId = (PaymentId) o;
            return Objects.equals(employee, paymentId.employee) && Objects.equals(period, paymentId.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employee, period);
        }
    }
  learner_created: true
- name: src/account/config/WebSecurityConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.beans.factory.annotation.Autowired;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;

    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;

    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private UserDetailsService userDetailsService;

        @Autowired
        private PasswordEncoder passwordEncoder;

        @Autowired
        public WebSecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
        }
        @Override
        public void configure(HttpSecurity http) throws Exception {

            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                    .mvcMatchers("/api/empl/**").authenticated()
                    .mvcMatchers(HttpMethod.POST,"/api/auth/**").authenticated()
    //                .mvcMatchers(HttpMethod.GET,"/api/empl/**").authenticated()
                    // other matchers
                    //.anyRequest().authenticated() // all other requests must be authenticated
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }




        @Bean
        public DaoAuthenticationProvider authenticationProvider(){
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(passwordEncoder);
            provider.setUserDetailsService(userDetailsService);
            return provider;
        }

    }
  learner_created: true
- name: src/account/services/PaymentService.java
  visible: true
  text: |
    package account.services;


    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.List;

    public interface PaymentService {
        List<PaymentDto> getPayments(String period, UserDetails userDetails);

        ResponseBody postPayment(List<PaymentRequest> paymentRequest);

        ResponseBody putPayment(PaymentRequest paymentRequest);
    }
  learner_created: true
- name: src/account/services/PaymentConversionService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.dto.PaymentRequest;
    import account.utils.YearMonthConverter;
    import org.springframework.core.convert.ConversionService;
    import org.springframework.core.convert.TypeDescriptor;
    import org.springframework.stereotype.Service;

    import java.time.YearMonth;

    @Service
    public class PaymentConversionService implements ConversionService {

        @Override
        public boolean canConvert(Class<?> sourceType, Class<?> targetType) {
            assert sourceType != null;
            return sourceType.equals(PaymentRequest.class) && targetType.equals(Payment.class);
        }

        @Override
        public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {
            return false;
        }


        @Override
        public <T> T convert(Object source, Class<T> targetType) {

            PaymentRequest paymentRequest = (PaymentRequest) source;

            String employee = paymentRequest.getEmployee();

            YearMonth period = YearMonthConverter.convert(paymentRequest.getPeriod());

            Long salary = paymentRequest.getSalary();

            return (T) new Payment(employee, period, salary);
        }

        @Override
        public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
            return null;
        }

    }
  learner_created: true
- name: src/account/services/UserService.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.List;

    public interface UserService {
        List<User> findAllUsers();

        User findUserById(Long id);

        User findUserByEmail(String email);

        List<User> findUsersByName(String name);

        User saveUser(User User);

        ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails);

        void deleteUserById(Long id);

        void deleteUser(User User);
    }
  learner_created: true
- name: src/account/services/UserServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.errors.UserException;
    import account.errors.UserExistsException;
    import account.repositories.UserRepository;
    import account.utils.SecurityChecker;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;


    import javax.validation.Validator;

    import java.util.List;


    @Service
    public class UserServiceImpl implements UserService{

        @Autowired
        private Validator validator;

        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PasswordEncoder passwordEncoder;

        final Logger LOGGER = LoggerFactory.getLogger(UserServiceImpl.class);


        /**
         * Get all Users from the database
         *
         * @return List of Users
         *
         */
        @Override
        public List<User> findAllUsers() {
            return userRepository.findAll();
        }

        /**
         * Find a user by id
         *
         * @param id the id of the User
         * @return the User
         * @throws UserException if the User is not found
         *
         */
        @Override
        public User findUserById(Long id) {
            return userRepository.findById(id).orElseThrow(() -> new UserException("User not found"));
        }

        @Override
        public User findUserByEmail(String email) {
            return userRepository.findByEmail(email).orElseThrow(() -> new UserException("User not found"));
        }

        /**
         * Find all the users by name containing the given string
         *
         * @param name the name of the user
         * @return the list of users
         * @throws UserException if the User is not found
         */
        @Override
        public List<User> findUsersByName(String name) {
            return userRepository.findByNameContaining(name);
        }

        /**
         * Save a User to the database
         *
         * @param user     the name of the User
         * @return User
         * @throws UserExistsException if the User already exists
         */

        // TODO: Should create an UserDto

        @Override
        public User saveUser(User user) {

            boolean alreadyRegisteredEmail;


            LOGGER.info("Boy?:" + user.getPassword() );
            if (SecurityChecker.isBreached(user.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            alreadyRegisteredEmail = userRepository.findByEmail(user.getEmail().toLowerCase()).isPresent();


            if (alreadyRegisteredEmail) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "User exist!");
            }

            user.setPassword(passwordEncoder.encode(user.getPassword()));
            user.setEmail(user.getEmail().toLowerCase());

            return userRepository.save(user);
        }

        /**
         * Changes the user's password
         *
         * @param changePasswordDto   User's password
         * @param userDetails       User's details
         * @return User
         */
        @Override
        public ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails) {

            ResponseBody responseBody = new ResponseBody();

            if(passwordEncoder.matches(changePasswordDto.getPassword(), userDetails.getPassword())){
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }

            User _user = findUserByEmail(userDetails.getUsername());

            if (SecurityChecker.isBreached(changePasswordDto.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            _user.setPassword(passwordEncoder.encode(changePasswordDto.getPassword()));

            userRepository.save(_user);

            responseBody.setEmail(_user.getEmail());
            responseBody.setStatus("The password has been updated successfully");

            return responseBody;
        }

        /**
         * Delete a User
         *
         * @param id the id of the User
         *
         */
        @Override
        public void deleteUserById(Long id) {
            userRepository.deleteById(id);
        }

        /**
         * Delete a User
         *
         * @param user user
         *
         */
        @Override
        public void deleteUser(User user) {
            userRepository.delete(user);
        }

    }
  learner_created: true
- name: src/account/services/PaymentServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import account.errors.UserException;
    import account.repositories.PaymentRepository;
    import account.repositories.UserRepository;
    import account.utils.PaymentUtils;
    import account.utils.YearMonthConverter;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Qualifier;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;


    import java.time.YearMonth;
    import java.util.*;

    @Service
    public class PaymentServiceImpl implements PaymentService {


        final private PaymentRepository paymentRepository;
        final private UserRepository userRepository;

        final static Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);
        private final PaymentConversionService paymentConversionService;


        public PaymentServiceImpl(PaymentRepository paymentRepository, UserRepository userRepository, PaymentConversionService paymentConversionService) {
            this.paymentRepository = paymentRepository;
            this.userRepository = userRepository;
            this.paymentConversionService = paymentConversionService;
        }

        @Override
        public List<PaymentDto> getPayments(String period, UserDetails userDetails) {
            User user = userRepository.findByEmail(userDetails.getUsername()).orElseThrow(() -> new UserException("User not found"));

            if (period != null) {
                Payment payment = paymentRepository.findByEmployeeAndPeriod(userDetails.getUsername(), YearMonthConverter.convert(period)).orElseThrow(() -> new UserException("Payment not found"));
                return PaymentUtils.mapPaymentsToPaymentDtos(Collections.singletonList(payment), user);
            }

            List<Payment> payments = paymentRepository.findAllByEmployee(userDetails.getUsername());
            return PaymentUtils.mapPaymentsToPaymentDtos(payments, user);
        }

        @Override
        @Transactional
        public ResponseBody postPayment(List<PaymentRequest> paymentRequests) {
            ResponseBody responseBody = new ResponseBody();
            Map<String, List<Payment>> paymentMap = new HashMap<>();

            // Check for duplicate payments for each employee
            paymentRequests.forEach(paymentRequest -> {
                Payment payment = paymentConversionService.convert(paymentRequest, Payment.class);
                if (paymentMap.containsKey(paymentRequest.getEmployee())) {
                    List<Payment> employeePayments = paymentMap.get(paymentRequest.getEmployee());
                    employeePayments.stream()
                            .filter(p -> p.getPeriod().equals(payment.getPeriod()))
                            .findFirst()
                            .ifPresent(p -> {
                                throw new UserException("Bad Request");
                            });
                    employeePayments.add(payment);
                } else {
                    List<Payment> employeePayments = new ArrayList<>();
                    employeePayments.add(payment);
                    paymentMap.put(paymentRequest.getEmployee(), employeePayments);
                }
            });

            LOGGER.info("Payments: " + paymentMap);

            // Save payments for each employee
            paymentMap.forEach((employee, employeePayments) -> {
                User user = userRepository.findByEmail(employee).orElseThrow(() -> new UserException("Bad Request"));
                LOGGER.info("Employee: " + employee + " payments: " + employeePayments);
                employeePayments.forEach(payment -> payment.setEmployee(user.getEmail()));
                paymentRepository.saveAll(employeePayments);
            });

            responseBody.setStatus("Added successfully!");
            return responseBody;
        }

        @Override
        public ResponseBody putPayment(PaymentRequest payment) {
            ResponseBody responseBody = new ResponseBody();


            User user = userRepository.findByEmail(payment.getEmployee()).orElseThrow(() -> new UserException("Employee not found"));

            YearMonth period = YearMonthConverter.convert(payment.getPeriod());

            Payment paymentFromDb = paymentRepository.
                    findByEmployeeAndPeriod(payment.getEmployee(), period)
                    .orElseThrow(() -> new UserException("Payment not found"));

            paymentFromDb.setSalary(payment.getSalary());

            paymentRepository.save(paymentFromDb);

            responseBody.setStatus("Updated successfully!");
            return responseBody;
        }




    }
  learner_created: true
- name: src/account/config/BCryptEncoderConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    public class BCryptEncoderConfig {
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }
    }
  learner_created: true
- name: src/account/errors/ErrorResponse.java
  visible: true
  text: |+
    package account.errors;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class ErrorResponse {
        private String timestamp;

        private int status;

        private String error;

        private String path;

        private String message;

        public ErrorResponse(String timestamp, int status, String error, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.path = path;
        }

        public ErrorResponse(String timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }


        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

  learner_created: true
- name: src/account/dto/ResponseBody.java
  visible: true
  text: "package account.dto;\n\npublic class ResponseBody {\n    private String email;\n\
    \    private String status;\n\n\n    public ResponseBody() {\n        \n    }\n\
    \n    public String getEmail() {\n        return email;\n    }\n\n    public void\
    \ setEmail(String email) {\n        this.email = email;\n    }\n\n    public String\
    \ getStatus() {\n        return status;\n    }\n\n    public void setStatus(String\
    \ status) {\n        this.status = status;\n    }\n}\n"
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.User;

    import io.swagger.v3.oas.annotations.tags.Tag;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;
    import org.springframework.data.rest.core.annotation.RestResource;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    @Tag(name = "User", description = "User API")
    public interface UserRepository extends JpaRepository<User, Long> {

        /**
         *
         * Find all Users from the database
         *
         */
        List<User> findAll();

        /**
         * Find a user by id
         *
         * @param id the id of the user
         * @return the user
         */

        Optional<User> findById(@Param("id") long id);

        /**
         * Find all the users by name containing the given string
         *
         * @param name the name of the user
         * @return the list of users
         */
        List<User> findByNameContaining(@Param("name") String name);

        /**
         * Save a user
         *
         * @param User the user to save
         * @return the saved user
         */

        @Override
    //     @RestResource(exported = false)
        <S extends User> S save(S User);

        @Override
        @RestResource(exported = false)
        <S extends User> List<S> saveAll(Iterable<S> users);

        // @RestResource(exported = false)
        void deleteById(long id);

        @Override
    //    @RestResource(exported = false)
        void delete(User user);

        @Override
        @RestResource(exported = false)
        void deleteAll(Iterable<? extends User> users);

    //    @Query("SELECT u FROM User u WHERE u.email = :email")
        Optional<User> findByEmail(String email);
    }
  learner_created: true
- name: src/account/domain/Payment.java
  visible: true
  text: |
    package account.domain;

    import account.utils.PaymentId;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.time.YearMonth;


    @Entity
    @Table(name = "payments")
    @IdClass(PaymentId.class)
    public class Payment {
        @Column
        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Id
        private String employee;

        @Id
        @Column
        @NotNull(message = "Period is required")
    //    @Pattern(regexp = "^(0[1-9]|1[012])-(19|20)\\d\\d$", message = "Period must be in the format MM-yyyy")
        private YearMonth period;

        @Column
        @NotNull(message = "User salary must not be empty")
        @Positive(message = "Salary must be positive")
        private Long salary;



        public Payment() {
        }

        public Payment(String employee, YearMonth period, Long salary) {
            this.employee = employee;
            this.period = period;
            this.salary = salary;
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/dto/PaymentRequest.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.io.Serializable;


    public class PaymentRequest implements Serializable {

        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String employee;

        @NotNull(message = "Period is required")
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MM-yyyy|yyyy-MM", locale = "en")
        private String period;
        @Positive(message = "Salary must be positive")
        @NotNull(message = "User salary must not be empty")
        private Long salary;

        public PaymentRequest() {
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/data/DataLoader.java
  visible: true
  learner_created: true
- name: src/account/repositories/GroupRepository.java
  visible: true
  learner_created: true
- name: src/account/domain/Group.java
  visible: true
  learner_created: true
- name: src/account/controllers/AdminController.java
  visible: true
  learner_created: true
- name: src/account/services/GroupService.java
  visible: true
  learner_created: true
- name: src/account/services/GroupServiceImpl.java
  visible: true
  learner_created: true
- name: src/account/dto/UserRequest.java
  visible: true
  text: |
    package account.dto;

    import account.domain.Role;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.List;

    public class UserDto {
        @NotEmpty(message = "Name is required")
        private String name;

        @NotEmpty(message = "Last name is required")
        private String lastname;
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @NotEmpty(message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @JsonIgnore
        private List<Role> roles;
        public UserDto() {
        }

        public UserDto(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public UserDto(String name, String lastName, String email, String password, List<Role> roles) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.roles = roles;
        }
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRoles() {
            return roles;
        }

        public void setRoles(List<Role> roles) {
            this.roles = roles;
        }
    }
  learner_created: true
- name: src/account/dto/UserDto.java
  visible: true
  learner_created: true
- name: src/account/dto/UserRoleRequest.java
  visible: true
  learner_created: true
- name: src/account/model/Operation.java
  visible: true
  learner_created: true
- name: src/account/config/CustomAccessDeniedHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 03 Mar 2023 02:27:52 UTC"
record: 5

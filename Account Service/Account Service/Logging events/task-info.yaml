type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/dto/ChangePasswordDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;

    public class ChangePasswordDto {
        @JsonProperty("new_password")
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        private String password;

        public ChangePasswordDto() {
        }

        public ChangePasswordDto(String password) {
            this.password = password;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }


    }
  learner_created: true
- name: src/account/errors/UserException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;


    public class UserException extends RuntimeException {
        private String error;
        private HttpStatus status;


        public UserException(String error) {
            this.error = error;
            this.status = HttpStatus.BAD_REQUEST;
        }

        public UserException(String error, HttpStatus status) {
            this.error = error;
            this.status = status;
        }

        public HttpStatus getStatus() {
            return status;
        }

        public void setStatus(HttpStatus status) {
            this.status = status;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

    }
  learner_created: true
- name: src/resources/banner.txt
  visible: true
  text: "-------------------------------------------------------------------------------------------------------\n\
    If you're seeing this code through Hyperskill, follow me on GitHub to see more\
    \ projects like this one!\n\n ██████  ██ ████████ ██   ██ ██    ██ ██████    \
    \     ███████  █████  ██████  ██    ██ ██  ██████ \n██       ██    ██    ██  \
    \ ██ ██    ██ ██   ██ ██     ██      ██   ██ ██   ██ ██    ██ ██ ██      \n██\
    \   ███ ██    ██    ███████ ██    ██ ██████         █████   ███████ ██████  ██\
    \    ██ ██ ██      \n██    ██ ██    ██    ██   ██ ██    ██ ██   ██ ██     ██ \
    \     ██   ██ ██   ██  ██  ██  ██ ██      \n ██████  ██    ██    ██   ██  ████\
    ██  ██████         ██      ██   ██ ██   ██   ████   ██  ██████\n  \nGitHub: https://github.com/farvic\n\
    LinkedIn: https://www.linkedin.com/in/victorfa/\n-------------------------------------------------------------------------------------------------------"
  learner_created: true
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.domain.Group;
    import account.domain.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;
    import java.util.Set;
    import java.util.stream.Collectors;

    public class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            username = user.getEmail().toLowerCase();
            password = user.getPassword();
    //        rolesAndAuthorities = List.of(new SimpleGrantedAuthority(user.getSecurityGroup().toString()));
            rolesAndAuthorities = getAuthorities(user);
        }


        public List<GrantedAuthority> getAuthorities(User user) {
            Set<Group> groups = user.getSecurityGroup();
            //        return user.getSecurityGroup()
    //                .stream().
    //                map(group ->
    //                        new SimpleGrantedAuthority(
    //                                group.getRole().
    //                                        getDescription()))
    //                .collect(Collectors.toList());
            return groups.stream()
                    .map(group -> new SimpleGrantedAuthority(group.getRole().getDescription()))
                    .collect(Collectors.toList());

        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        // 4 remaining methods that just return true
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/errors/UserExistsException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;

    public class UserExistsException extends UserException{

        @Override
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        String message;
        public UserExistsException(String error, HttpStatus status, String message) {
            super(error, status);
            this.message = message;
        }

    }
  learner_created: true
- name: src/account/utils/YearMonthConverter.java
  visible: true
  text: |
    package account.utils;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;

    public class YearMonthConverter {
        public static YearMonth convert(String input) {
            String formattedInput = input;
            if (input.matches("\\d{4}-\\d{2}")) {
                formattedInput = input.substring(5) + "-" + input.substring(0, 4);
            }
            return YearMonth.parse(formattedInput, DateTimeFormatter.ofPattern("MM-yyyy"));
        }
    }
  learner_created: true
- name: src/account/controllers/AdminController.java
  visible: true
  text: |
    package account.controllers;



    import org.springframework.web.bind.annotation.*;



    @RestController
    @RequestMapping("/api/admin")
    public class AdminController {



    //    @DeleteMapping("/user/{email}")
    //    public ResponseEntity<?> deleteUser(@PathVariable String email) {
    //        return ResponseEntity.ok(null);
    //    }

    }
  learner_created: true
- name: src/account/domain/Group.java
  visible: true
  text: |
    package account.domain;

    import javax.persistence.*;
    import java.util.Objects;

    @Entity
    @Table(name = "security_group")
    public class Group {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "group_id")
        private Long id;

        @Enumerated(EnumType.STRING)
        @Column(unique = true, updatable = false)
        private Role role;


        public Group() {


        }
        public Group(Role role) {
            this.role = role;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public Role getRole() {
            return role;
        }

        public void setRole(Role role) {
            this.role = role;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Group group = (Group) o;
            return getRole() == group.getRole();
        }

        @Override
        public int hashCode() {
            return Objects.hash(getRole());
        }
    }
  learner_created: true
- name: src/account/dto/PaymentDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import java.time.YearMonth;

    public class PaymentDto {

        private String name;

        private String lastname;

        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MMMM-yyyy", locale = "en")
        @JsonSerialize(using = YearMonthSerializer.class)
        @JsonDeserialize(using = YearMonthDeserializer.class)
        private YearMonth period;
        private String salary;

        public PaymentDto() {
        }

        public PaymentDto(String name, String lastname, YearMonth period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }


        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }
    }
  learner_created: true
- name: src/account/utils/SecurityChecker.java
  visible: true
  text: |
    package account.utils;

    import java.util.ArrayList;
    import java.util.List;

    public class SecurityChecker {

        private static final List<String> breachedPasswords = new ArrayList<>();

        static {
            breachedPasswords.addAll(
                    List.of(
                            "PasswordForJanuary",
                            "PasswordForFebruary",
                            "PasswordForMarch",
                            "PasswordForApril",
                            "PasswordForMay",
                            "PasswordForJune",
                            "PasswordForJuly",
                            "PasswordForAugust",
                            "PasswordForSeptember",
                            "PasswordForOctober",
                            "PasswordForNovember",
                            "PasswordForDecember"
                    )
            );
        }

        public static boolean isBreached(String password) {
            return breachedPasswords.contains(password);
        }

    }
  learner_created: true
- name: src/account/domain/User.java
  visible: true
  text: |
    package account.domain;


    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.*;

    import java.util.HashSet;

    import java.util.Set;


    @Entity
    @Table(name = "user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;
        @NotEmpty(message = "Name is required")
        @Column(name = "name", nullable = false)
        private String name;

        @NotEmpty(message = "Last name is required")
        @Column(name = "last_name", nullable = false)
        private String lastname;

    //    @Email(regexp = ".*@acme\\.com",message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Column(name = "email", nullable = false, unique = true)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password", nullable = false)
        private String password;

        @JsonIgnore
        @Column(name = "group")
        @ManyToMany(fetch = FetchType.EAGER)
        @JoinTable(name = "user_security_group",
                joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),
                inverseJoinColumns = @JoinColumn(name = "group_id", referencedColumnName = "group_id"))
        Set<Group> securityGroup = new HashSet<>();
        public User() {

        }

        public User(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public User(String name, String lastName, String email, String password, HashSet<Group> securityGroup) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.securityGroup = securityGroup;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Set<Group> getSecurityGroup() {
            return securityGroup;
        }

        public void setSecurityGroup(Set<Group> securityGroup) {
            this.securityGroup = securityGroup;
        }
        public void addSecurityGroup(Group securityGroup) {
            this.securityGroup.add(securityGroup);
        }

    }
  learner_created: true
- name: src/account/errors/CustomControllerAdvice.java
  visible: true
  text: |
    package account.errors;

    import com.fasterxml.jackson.databind.exc.MismatchedInputException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.transaction.TransactionSystemException;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;


    import javax.servlet.http.HttpServletRequest;

    import java.time.DateTimeException;
    import java.time.LocalDateTime;

    @RestControllerAdvice
    public class CustomControllerAdvice {

        int status;
        String timestamp;
        String path;
        String message;


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(TransactionSystemException.class)
        public ResponseEntity<ErrorResponse> constraintViolationException(
                TransactionSystemException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(DateTimeException.class)
        public ResponseEntity<ErrorResponse> dateInputException(
                DateTimeException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MismatchedInputException.class)
        public ResponseEntity<ErrorResponse> mismatchedInputException(
                MismatchedInputException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<ErrorResponse> methodNotValidException(
                MethodArgumentNotValidException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getFieldError().getDefaultMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(UserExistsException.class)
        public ResponseEntity<ErrorResponse> handleUserExistsException(
                UserExistsException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            message,
                            path)
                    , e.getStatus()
            );
        }


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(RuntimeException.class)
        public ResponseEntity<ErrorResponse> handleUserExceptions(
                UserException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
                    );
        }

        @ExceptionHandler(Exception.class) // exception handled
        public ResponseEntity<ErrorResponse> handleExceptions(
                UserException e, HttpServletRequest request) {
            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getContextPath();
            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
            );
        }
    }
  learner_created: true
- name: src/account/controllers/PaymentController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.services.PaymentServiceImpl;
    import account.dto.ResponseBody;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    import java.util.List;

    @RestController
    @RequestMapping("/api")
    public class PaymentController {

        private final PaymentServiceImpl paymentService;

        public PaymentController(PaymentServiceImpl paymentService) {
            this.paymentService = paymentService;
        }


        @GetMapping("/empl/payment")
        public ResponseEntity<?> getPayments(
                @RequestParam(value = "period", required = false) String period,
                @AuthenticationPrincipal UserDetails userDetails)
        {

            List<PaymentDto> payments = paymentService.getPayments(period, userDetails);
            if (period != null)
                return ResponseEntity.ok(payments.get(0));
            else
                return ResponseEntity.ok(payments);
        }


        @PostMapping("/acct/payments")
        public ResponseEntity<ResponseBody> postPayment(@Valid @RequestBody List<PaymentRequest> paymentRequest) {
            ResponseBody responseBody = paymentService.postPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

        @PutMapping("/acct/payments")
        public ResponseEntity<ResponseBody> putPayment(@Valid @RequestBody  PaymentRequest paymentRequest) {
            ResponseBody responseBody = paymentService.putPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(
                HttpServletRequest request,
                HttpServletResponse response,
                AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, " "
            );
        }
    }
  learner_created: true
- name: src/account/utils/PaymentUtils.java
  visible: true
  text: |
    package account.utils;
    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import java.util.ArrayList;
    import java.util.List;

    public class PaymentUtils {

        public static List<PaymentDto> mapPaymentsToPaymentDtos(List<Payment> payments, User employee) {
            List<PaymentDto> paymentDtos = new ArrayList<>();
            for (Payment payment : payments) {
                PaymentDto paymentDto = new PaymentDto();
                paymentDto.setName(employee.getName());
                paymentDto.setLastname(employee.getLastname());
                paymentDto.setPeriod(payment.getPeriod());
                paymentDto.setSalary(formatSalary(payment.getSalary()));
                paymentDtos.add(paymentDto);
            }
            paymentDtos.sort((o1, o2) -> o2.getPeriod().compareTo(o1.getPeriod()));
            return paymentDtos;
        }

        private static String formatSalary(long salary) {
            long dollars = salary / 100;
            long cents = salary % 100;
            return String.format("%d dollar(s) %02d cent(s)", dollars, cents);
        }
    }
  learner_created: true
- name: src/account/services/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.config.UserDetailsImpl;
    import account.domain.User;
    import account.repositories.UserRepository;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.Collection;
    import java.util.Collections;
    import java.util.logging.Logger;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        final UserRepository userRepository;

        Logger logger = Logger.getLogger(UserDetailsServiceImpl.class.getName());

        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }
        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByEmail(username.toLowerCase())
                    .orElseThrow(() -> new UsernameNotFoundException("Not found: " + username));


            return new UserDetailsImpl(user);
        }



    }
  learner_created: true
- name: src/account/config/CustomAccessDeniedHandler.java
  visible: true
  text: |
    package account.config;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        public static final Logger LOG
                = LoggerFactory.getLogger(CustomAccessDeniedHandler.class);

        @Override
        public void handle(
                HttpServletRequest request,
                HttpServletResponse response,
                AccessDeniedException exc) throws IOException, ServletException {

            Authentication auth
                    = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null) {
                LOG.warn("User: " + auth.getName()
                        + " attempted to access the protected URL: "
                        + request.getRequestURI());
            }

            response.sendError(
                    HttpServletResponse.SC_FORBIDDEN,
                    "Access Denied!");
        }
    }
  learner_created: true
- name: src/account/domain/Role.java
  visible: true
  text: |-
    package account.domain;

    public enum Role {

        ROLE_ACCOUNTANT("ACCOUNTANT"),
        ROLE_ADMINISTRATOR("ADMINISTRATOR"),
        ROLE_AUDITOR("AUDITOR"),
        ROLE_USER("USER");

        private final String description;



        Role(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/account/utils/UserMapper.java
  visible: true
  text: |
    package account.utils;

    import account.domain.User;
    import account.dto.UserDto;
    import account.dto.UserRequest;
    import org.springframework.stereotype.Component;

    import java.util.List;




    @Component
    public class UserMapper {
        public static UserDto toDto(User user) {
            List<String> roles = user.getSecurityGroup().stream().map(group -> group.getRole().name()).sorted().toList();
            return new UserDto(
                    user.getId(),
                    user.getName(),
                    user.getLastname(),
                    user.getEmail(),
                    roles
            );
        }

        public static User toEntity(UserRequest userRequest) {
            User user = new User();
            user.setName(userRequest.getName());
            user.setLastname(userRequest.getLastname());
            user.setPassword(userRequest.getPassword());
            user.setEmail(userRequest.getEmail());
            user.setSecurityGroup(userRequest.getSecurityGroup());
            return user;
        }
    }
  learner_created: true
- name: src/account/repositories/PaymentRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Payment;
    import org.springframework.data.jpa.repository.JpaRepository;

    import java.time.YearMonth;
    import java.util.List;
    import java.util.Optional;

    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        List<Payment> findAllByEmployee(String employee);
        Optional<Payment> findByEmployeeAndPeriod(String employee, YearMonth period);
    }
  learner_created: true
- name: src/account/dto/UserRoleRequest.java
  visible: true
  text: |
    package account.dto;

    import account.domain.Role;
    import account.model.Operation;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;

    public class UserRoleRequest {

        @NotEmpty(message = "User is required")
        String user;

        @NotNull(message = "Role is required")
        String role;

        @NotNull(message = "Operation is required")
        Operation operation;

        protected UserRoleRequest() {

        }

        public UserRoleRequest(String user, String role, Operation operation) {
            this.user = user;
            this.role = role;
            this.operation = operation;
        }


        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public Operation getOperation() {
            return operation;
        }

        public void setOperation(Operation operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/utils/PaymentId.java
  visible: true
  text: |
    package account.utils;

    import java.io.Serializable;
    import java.time.YearMonth;
    import java.util.Objects;

    public class PaymentId implements Serializable {

        private String employee;

        private YearMonth period;

        public PaymentId() {
        }

        public PaymentId(String employee, YearMonth period) {
            this.employee = employee;
            this.period = period;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PaymentId paymentId = (PaymentId) o;
            return Objects.equals(employee, paymentId.employee) && Objects.equals(period, paymentId.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employee, period);
        }
    }
  learner_created: true
- name: src/account/services/GroupService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Group;
    import account.domain.Role;

    import java.util.Optional;

    public interface GroupService {

        Group getGroupByRole(Role role);

        Group save(Group group);

    }
  learner_created: true
- name: src/account/services/GroupServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Group;
    import account.domain.Role;
    import account.errors.UserExistsException;
    import account.repositories.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.Optional;

    @Service
    public class GroupServiceImpl implements GroupService {



        private final GroupRepository groupRepository;

        @Autowired
        public GroupServiceImpl(GroupRepository groupRepository) {
            this.groupRepository = groupRepository;
        }

        @Override
        public Group getGroupByRole(Role role) {
            return groupRepository.findByRole(role).orElseThrow(
                    () -> new UserExistsException("Not Found", HttpStatus.NOT_FOUND, "Role not found!")
            );
        }

        @Override
        @Transactional
        public Group save(Group group) {
            Group groupToSave = getGroupByRole(group.getRole());
            groupToSave.setId(group.getId());
            return groupRepository.save(group);
        }
    }
  learner_created: true
- name: src/account/config/WebSecurityConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.beans.factory.annotation.Autowired;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;

    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;

    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import static account.domain.Role.*;

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private UserDetailsService userDetailsService;

        @Autowired
        private PasswordEncoder passwordEncoder;

        @Autowired
        public WebSecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
        }
        @Override
        public void configure(HttpSecurity http) throws Exception {

            http
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                    .mvcMatchers("/api/auth/changepass").authenticated()
                    .mvcMatchers("/api/empl/payment").hasAnyAuthority(ROLE_ACCOUNTANT.getDescription(), ROLE_USER.getDescription())
                    .mvcMatchers("/api/admin/**").hasAuthority(ROLE_ADMINISTRATOR.getDescription())
                    .mvcMatchers("/api/acct/**").hasAuthority(ROLE_ACCOUNTANT.getDescription())
                    .mvcMatchers(HttpMethod.GET,"/api/empl/payments").hasAnyAuthority(ROLE_ACCOUNTANT.getDescription(), ROLE_USER.getDescription())
                    .mvcMatchers("/api/acct/payments").hasAuthority(ROLE_ACCOUNTANT.getDescription())
                    //.anyRequest().authenticated() // all other requests must be authenticated
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }




        @Bean
        public DaoAuthenticationProvider authenticationProvider(){
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(passwordEncoder);
            provider.setUserDetailsService(userDetailsService);
            return provider;
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler(){
            return new CustomAccessDeniedHandler();
        }

    }
  learner_created: true
- name: src/account/services/PaymentService.java
  visible: true
  text: |
    package account.services;


    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.List;

    public interface PaymentService {
        List<PaymentDto> getPayments(String period, UserDetails userDetails);

        ResponseBody postPayment(List<PaymentRequest> paymentRequest);

        ResponseBody putPayment(PaymentRequest paymentRequest);
    }
  learner_created: true
- name: src/account/services/PaymentConversionService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.dto.PaymentRequest;
    import account.utils.YearMonthConverter;
    import org.springframework.core.convert.ConversionService;
    import org.springframework.core.convert.TypeDescriptor;
    import org.springframework.stereotype.Service;

    import java.time.YearMonth;

    @Service
    public class PaymentConversionService implements ConversionService {

        @Override
        public boolean canConvert(Class<?> sourceType, Class<?> targetType) {
            assert sourceType != null;
            return sourceType.equals(PaymentRequest.class) && targetType.equals(Payment.class);
        }

        @Override
        public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {
            return false;
        }


        @Override
        public <T> T convert(Object source, Class<T> targetType) {

            PaymentRequest paymentRequest = (PaymentRequest) source;

            String employee = paymentRequest.getEmployee();

            YearMonth period = YearMonthConverter.convert(paymentRequest.getPeriod());

            Long salary = paymentRequest.getSalary();

            return (T) new Payment(employee, period, salary);
        }

        @Override
        public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
            return null;
        }

    }
  learner_created: true
- name: src/account/services/PaymentServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import account.errors.UserException;
    import account.repositories.PaymentRepository;
    import account.repositories.UserRepository;
    import account.utils.PaymentUtils;
    import account.utils.YearMonthConverter;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Qualifier;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;


    import java.time.YearMonth;
    import java.util.*;

    @Service
    public class PaymentServiceImpl implements PaymentService {


        final private PaymentRepository paymentRepository;
        final private UserRepository userRepository;

        final static Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);
        private final PaymentConversionService paymentConversionService;


        public PaymentServiceImpl(PaymentRepository paymentRepository, UserRepository userRepository, PaymentConversionService paymentConversionService) {
            this.paymentRepository = paymentRepository;
            this.userRepository = userRepository;
            this.paymentConversionService = paymentConversionService;
        }

        @Override
        public List<PaymentDto> getPayments(String period, UserDetails userDetails) {
            User user = userRepository.findByEmail(userDetails.getUsername()).orElseThrow(() -> new UserException("User not found"));

            if (period != null) {
                Payment payment = paymentRepository.findByEmployeeAndPeriod(userDetails.getUsername(), YearMonthConverter.convert(period)).orElseThrow(() -> new UserException("Payment not found"));
                return PaymentUtils.mapPaymentsToPaymentDtos(Collections.singletonList(payment), user);
            }

            List<Payment> payments = paymentRepository.findAllByEmployee(userDetails.getUsername());
            return PaymentUtils.mapPaymentsToPaymentDtos(payments, user);
        }

        @Override
        @Transactional
        public ResponseBody postPayment(List<PaymentRequest> paymentRequests) {
            ResponseBody responseBody = new ResponseBody();
            Map<String, List<Payment>> paymentMap = new HashMap<>();
            LOGGER.info("Payment requests: " + paymentRequests);

            // Check for duplicate payments for each employee
            paymentRequests.forEach(paymentRequest -> {
                Payment payment = paymentConversionService.convert(paymentRequest, Payment.class);
                if (paymentMap.containsKey(paymentRequest.getEmployee())) {
                    List<Payment> employeePayments = paymentMap.get(paymentRequest.getEmployee());
                    employeePayments.stream()
                            .filter(p -> p.getPeriod().equals(payment.getPeriod()))
                            .findFirst()
                            .ifPresent(p -> {
                                throw new UserException("Bad Request");
                            });
                    employeePayments.add(payment);
                } else {
                    List<Payment> employeePayments = new ArrayList<>();
                    employeePayments.add(payment);
                    paymentMap.put(paymentRequest.getEmployee(), employeePayments);
                }
            });

            LOGGER.info("Payments: " + paymentMap);

            // Save payments for each employee
            paymentMap.forEach((employee, employeePayments) -> {
                User user = userRepository.findByEmail(employee).orElseThrow(() -> new UserException("Bad Request"));
                LOGGER.info("Employee: " + employee + " payments: " + employeePayments);
                employeePayments.forEach(payment -> payment.setEmployee(user.getEmail()));
                paymentRepository.saveAll(employeePayments);
            });

            responseBody.setStatus("Added successfully!");
            return responseBody;
        }

        @Override
        public ResponseBody putPayment(PaymentRequest payment) {
            ResponseBody responseBody = new ResponseBody();


            User user = userRepository.findByEmail(payment.getEmployee()).orElseThrow(() -> new UserException("Employee not found"));

            YearMonth period = YearMonthConverter.convert(payment.getPeriod());

            Payment paymentFromDb = paymentRepository.
                    findByEmployeeAndPeriod(payment.getEmployee(), period)
                    .orElseThrow(() -> new UserException("Payment not found"));

            paymentFromDb.setSalary(payment.getSalary());

            paymentRepository.save(paymentFromDb);

            responseBody.setStatus("Updated successfully!");
            return responseBody;
        }




    }
  learner_created: true
- name: src/account/config/BCryptEncoderConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    public class BCryptEncoderConfig {
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }
    }
  learner_created: true
- name: src/account/errors/ErrorResponse.java
  visible: true
  text: |+
    package account.errors;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class ErrorResponse {
        private String timestamp;

        private int status;

        private String error;

        private String path;

        private String message;

        public ErrorResponse(String timestamp, int status, String error, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.path = path;
        }

        public ErrorResponse(String timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }


        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

  learner_created: true
- name: src/account/dto/ResponseBody.java
  visible: true
  text: "package account.dto;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\
    import com.fasterxml.jackson.annotation.JsonInclude.Include;\n\n@JsonInclude(Include.NON_NULL)\n\
    public class ResponseBody {\n    private String user;\n\n    private String email;\n\
    \    private String status;\n\n\n    public ResponseBody() {\n        \n    }\n\
    \n    public String getUser() {\n        return user;\n    }\n\n    public void\
    \ setUser(String user) {\n        this.user = user;\n    }\n\n    public String\
    \ getEmail() {\n        return email;\n    }\n\n    public void setEmail(String\
    \ email) {\n        this.email = email;\n    }\n\n    public String getStatus()\
    \ {\n        return status;\n    }\n\n    public void setStatus(String status)\
    \ {\n        this.status = status;\n    }\n}\n"
  learner_created: true
- name: src/account/dto/UserRequest.java
  visible: true
  text: |
    package account.dto;

    import account.domain.Group;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.HashSet;

    public class UserRequest {
        @NotEmpty(message = "Name is required")
        private String name;

        @NotEmpty(message = "Last name is required")
        private String lastname;
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @NotEmpty(message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @JsonIgnore
        private HashSet<Group> securityGroup = new HashSet<>();
        public UserRequest() {
        }

        public UserRequest(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public UserRequest(String name, String lastName, String email, String password, HashSet<Group> securityGroup) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.securityGroup = securityGroup;
        }
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public HashSet<Group> getSecurityGroup() {
            return securityGroup;
        }

        public void setSecurityGroup(HashSet<Group> securityGroup) {
            this.securityGroup = securityGroup;
        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.User;

    import account.dto.UserDto;
    import io.swagger.v3.oas.annotations.tags.Tag;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.query.Param;
    import org.springframework.data.rest.core.annotation.RestResource;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    @Tag(name = "User", description = "User API")
    public interface UserRepository extends JpaRepository<User, Long> {

        /**
         *
         * Find all Users from the database
         *
         */
        List<User> findAll();

        /**
         * Find a user by id
         *
         * @param id the id of the user
         * @return the user
         */


        Optional<UserDto> findById(@Param("id") long id);


        /**
         * Save a user
         *
         * @param User the user to save
         * @return the saved user
         */

        @Override
    //     @RestResource(exported = false)
        <S extends User> S save(S User);

        @Override
        @RestResource(exported = false)
        <S extends User> List<S> saveAll(Iterable<S> users);

        // @RestResource(exported = false)
        void deleteByEmail(String email);

        @Override
    //    @RestResource(exported = false)
        void delete(User user);

        @Override
        @RestResource(exported = false)
        void deleteAll(Iterable<? extends User> users);

    //    @Query("SELECT u FROM User u WHERE u.email = :email")
        Optional<User> findByEmail(String email);
    }
  learner_created: true
- name: src/account/data/DataLoader.java
  visible: true
  text: |
    package account.data;

    import account.domain.Group;
    import account.domain.Role;
    import account.repositories.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class DataLoader {

        final private GroupRepository groupRepository;

        @Autowired
        public DataLoader(GroupRepository groupRepository) {
            this.groupRepository = groupRepository;
            createRoles();
        }

        private void createRoles() {
            try {
                groupRepository.save(new Group(Role.ROLE_ADMINISTRATOR));
                groupRepository.save(new Group(Role.ROLE_USER));
                groupRepository.save(new Group(Role.ROLE_ACCOUNTANT));
            } catch (Exception e) {

            }
        }
    }
  learner_created: true
- name: src/account/dto/UserDto.java
  visible: true
  text: |
    package account.dto;


    public record UserDto(Long id, String name, String lastname, String email, java.util.List<String> roles) {

    }
  learner_created: true
- name: src/account/model/Operation.java
  visible: true
  text: |
    package account.model;

    public enum Operation {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/repositories/GroupRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Group;
    import account.domain.Role;
    import org.springframework.data.jpa.repository.JpaRepository;

    import java.util.Optional;

    public interface GroupRepository extends JpaRepository<Group, Long> {
        Optional<Group> findByRole(Role role);
    }
  learner_created: true
- name: src/account/domain/Payment.java
  visible: true
  text: |
    package account.domain;

    import account.utils.PaymentId;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.time.YearMonth;


    @Entity
    @Table(name = "payments")
    @IdClass(PaymentId.class)
    public class Payment {
        @Column
        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Id
        private String employee;

        @Id
        @Column
        @NotNull(message = "Period is required")
    //    @Pattern(regexp = "^(0[1-9]|1[012])-(19|20)\\d\\d$", message = "Period must be in the format MM-yyyy")
        private YearMonth period;

        @Column
        @NotNull(message = "User salary must not be empty")
        @Positive(message = "Salary must be positive")
        private Long salary;



        public Payment() {
        }

        public Payment(String employee, YearMonth period, Long salary) {
            this.employee = employee;
            this.period = period;
            this.salary = salary;
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/dto/PaymentRequest.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.io.Serializable;


    public class PaymentRequest implements Serializable {

        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String employee;

        @NotNull(message = "Period is required")
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MM-yyyy|yyyy-MM", locale = "en")
        private String period;
        @Positive(message = "Salary must be positive")
        @NotNull(message = "User salary must not be empty")
        private Long salary;

        public PaymentRequest() {
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/controllers/SecurityController.java
  visible: true
  learner_created: true
- name: src/account/domain/Event.java
  visible: true
  learner_created: true
- name: src/account/model/Log.java
  visible: true
  learner_created: true
- name: src/account/repositories/EventRepository.java
  visible: true
  learner_created: true
- name: src/account/services/EventService.java
  visible: true
  learner_created: true
- name: src/account/dto/EventDto.java
  visible: true
  learner_created: true
- name: src/account/services/EventServiceImpl.java
  visible: true
  learner_created: true
- name: src/account/utils/EventMapper.java
  visible: true
  learner_created: true
- name: src/account/controllers/AuthController.java
  visible: true
  text: |
    package account.controllers;


    import account.domain.User;
    import account.dto.*;
    import account.dto.ResponseBody;
    import account.services.UserServiceImpl;
    import account.utils.UserMapper;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.transaction.annotation.Transactional;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @CrossOrigin(origins = "http://localhost:28852")
    @RestController
    @RequestMapping("/api")
    @Tag(name = "User", description = "User API")
    public class UserController {

        private final UserServiceImpl userService;

        final Logger LOGGER = LoggerFactory.getLogger(UserController.class);

        public UserController(UserServiceImpl userService) {
            this.userService = userService;
        }

        @Operation(summary = "Get a User", description = "Get a User", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/admin/user")
        public ResponseEntity<List<UserDto>> findAll() {
            return ResponseEntity.ok(userService.findAllUsers());
        }

        @Operation(summary = "Create a User", description = "Create a User", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/signup")
        public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserRequest userRequest) {

            User user = UserMapper.toEntity(userRequest);

            return ResponseEntity.ok(userService.saveUser(user));
        }

        @Operation(summary = "Change password", description = "Changes the user's password", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/changepass")
        public ResponseBody changePassword(@Valid @RequestBody ChangePasswordDto changePasswordDto, @AuthenticationPrincipal UserDetails userDetails) {
            return userService.changePassword(changePasswordDto, userDetails);
        }

        @Transactional
        @PutMapping("/admin/user/role")
        public ResponseEntity<UserDto> setUserRole(@Valid @RequestBody UserRoleRequest userRoleRequest) {
            return ResponseEntity.ok(userService.changeUserRole(userRoleRequest));
        }

        @Operation(summary = "Delete a User", description = "Delete a User by id", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "No content")
        @DeleteMapping("/admin/user/{email}")
        public ResponseEntity<ResponseBody> deleteUser(@PathVariable String email) {
            return ResponseEntity.ok(userService.deleteUserByEmail(email));
        }

        @Operation(summary = "Get a User by email", description = "Get a User by email", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/email/{email}")
        public ResponseEntity<User> getUserByEmail(@PathVariable String email) {
            return ResponseEntity.ok(userService.findUserByEmail(email));
        }


    }
  learner_created: true
- name: src/account/services/AuthServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Group;
    import account.domain.Role;
    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.dto.UserDto;
    import account.dto.UserRoleRequest;
    import account.errors.UserException;
    import account.errors.UserExistsException;
    import account.model.Operation;

    import account.repositories.UserRepository;
    import account.utils.SecurityChecker;
    import account.utils.UserMapper;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;


    import javax.validation.Validator;

    import java.util.Arrays;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;


    @Service
    public class UserServiceImpl implements UserService{

        @Autowired
        private Validator validator;

        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PasswordEncoder passwordEncoder;

        final Logger LOGGER = LoggerFactory.getLogger(UserServiceImpl.class);

        @Autowired
        private GroupServiceImpl groupService;


        /**
         * Get all Users from the database
         *
         * @return List of Users
         *
         */
        @Override
        public List<UserDto> findAllUsers() {
            LOGGER.info("Getting all users");
            return userRepository.findAll().stream().map(UserMapper::toDto).toList();
        }

    //    /**
    //     * Find a user by id
    //     *
    //     * @param id the id of the User
    //     * @return the User
    //     * @throws UserException if the User is not found
    //     *
    //     */
    //    @Override
    //    public UserDto findUserById(Long id) {
    //        return userRepository.findById(id).orElseThrow(() -> new UserException("User not found"));
    //    }

        @Override
        public User findUserByEmail(String email) {
            return userRepository.findByEmail(email.toLowerCase()).orElseThrow(() -> new UserExistsException("Not Found",HttpStatus.NOT_FOUND,"User not found!"));
        }

        /**
         * Save a User to the database
         *
         * @param user     the name of the User
         * @return User
         * @throws UserExistsException if the User already exists
         */

        // TODO: Should create an UserRequest

        @Override
        public UserDto saveUser(User user) {

            boolean alreadyRegisteredEmail;

            if (SecurityChecker.isBreached(user.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            alreadyRegisteredEmail = userRepository.findByEmail(user.getEmail().toLowerCase()).isPresent();


            if (alreadyRegisteredEmail) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "User exist!");
            }

            user.setPassword(passwordEncoder.encode(user.getPassword()));
            user.setEmail(user.getEmail().toLowerCase());

            boolean _userExists = userRepository.findById(1).isPresent();

            Group group = groupService.getGroupByRole(_userExists ? Role.ROLE_USER : Role.ROLE_ADMINISTRATOR);

            user.getSecurityGroup().add(group);

            return UserMapper.toDto(userRepository.save(user));
        }

        /**
         * Changes the user's password
         *
         * @param changePasswordDto   User's password
         * @param userDetails       User's details
         * @return User
         */
        @Override
        public ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails) {

            ResponseBody responseBody = new ResponseBody();

            if(passwordEncoder.matches(changePasswordDto.getPassword(), userDetails.getPassword())){
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }

            User _user = findUserByEmail(userDetails.getUsername());

            if (SecurityChecker.isBreached(changePasswordDto.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            _user.setPassword(passwordEncoder.encode(changePasswordDto.getPassword()));

            userRepository.save(_user);

            responseBody.setEmail(_user.getEmail());
            responseBody.setStatus("The password has been updated successfully");

            return responseBody;
        }

        /**
         * Changes the user's role
         *
         * @param userRoleRequest   User's role
         * @return User
         */
        @Override
        public UserDto changeUserRole(UserRoleRequest userRoleRequest) {

            LOGGER.info("{} user role for user: {} to role: {}", userRoleRequest.getOperation(),userRoleRequest.getUser(), userRoleRequest.getRole());

            if (Arrays.stream(Role.values()).noneMatch(role -> role.name().equals("ROLE_" + userRoleRequest.getRole()))) {
                throw new UserExistsException("Not Found", HttpStatus.NOT_FOUND, "Role not found!");
            }

            Role roleFromRequest = Role.valueOf("ROLE_" + userRoleRequest.getRole());
            Operation operation = userRoleRequest.getOperation();

            if (roleFromRequest == Role.ROLE_ADMINISTRATOR) {
                if (operation == Operation.REMOVE) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
                }
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }

            User _user = findUserByEmail(userRoleRequest.getUser());
            Set<Group> userSecurityGroups = new HashSet<>(_user.getSecurityGroup());

            if (operation == Operation.REMOVE) {

                if (userSecurityGroups.stream().noneMatch(group -> group.getRole() == roleFromRequest)) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user does not have a role!");
                }

                if (userSecurityGroups.size() == 1) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user must have at least one role!");
                }
    //            if (_user.getSecurityGroup().stream().findAny(group -> group.(new Group(roleFromRequest)))) {
    //                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
    //            }

                userSecurityGroups.removeIf(group -> group.getRole() == roleFromRequest);
            }
            else{
                if (userSecurityGroups.stream().anyMatch(group -> group.getRole() == Role.ROLE_ADMINISTRATOR)) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
                }
                userSecurityGroups.add(groupService.getGroupByRole(roleFromRequest));

            }


            _user.setSecurityGroup(userSecurityGroups);

            return UserMapper.toDto(userRepository.save(_user));
        }


        /**
         * Delete a User
         *
         * @param email         the email of the User
         *
         */
        @Override
        public ResponseBody deleteUserByEmail(String email) {

            ResponseBody responseBody = new ResponseBody();

            User _user = findUserByEmail(email);

            if (_user.getId() == 1) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }

            userRepository.delete(_user);

            responseBody.setUser(email);
            responseBody.setStatus("Deleted successfully!");
            return responseBody;
        }


    }
  learner_created: true
- name: src/account/services/AuthService.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.dto.UserDto;
    import account.dto.UserRoleRequest;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.List;

    public interface UserService {
        List<UserDto> findAllUsers();

    //    UserDto findUserById(Long id);

        User findUserByEmail(String email);

        UserDto saveUser(User User);

        UserDto changeUserRole(UserRoleRequest userRoleRequest);

        ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails);

        ResponseBody deleteUserByEmail(String email);

    }
  learner_created: true
- name: src/account/model/EventBuilder.java
  visible: true
  learner_created: true
- name: src/account/security/CustomLoginFailureHandler.java
  visible: true
  learner_created: true
- name: src/account/security/CustomLoginSuccessHandler.java
  visible: true
  learner_created: true
- name: src/account/security/AuthenticationFailureListener.java
  visible: true
  learner_created: true
- name: src/account/security/AuthenticationSuccessListener.java
  visible: true
  learner_created: true
- name: src/account/dto/UserAccessRequest.java
  visible: true
  learner_created: true
- name: src/account/model/AccessOperation.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 04 Mar 2023 07:32:28 UTC"
record: 6

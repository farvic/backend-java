type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/resources/banner.txt
  visible: true
  text: "-------------------------------------------------------------------------------------------------------\n\
    If you're seeing this code through Hyperskill, follow me on GitHub to see more\
    \ projects like this one!\n\n ██████  ██ ████████ ██   ██ ██    ██ ██████    \
    \     ███████  █████  ██████  ██    ██ ██  ██████ \n██       ██    ██    ██  \
    \ ██ ██    ██ ██   ██ ██     ██      ██   ██ ██   ██ ██    ██ ██ ██      \n██\
    \   ███ ██    ██    ███████ ██    ██ ██████         █████   ███████ ██████  ██\
    \    ██ ██ ██      \n██    ██ ██    ██    ██   ██ ██    ██ ██   ██ ██     ██ \
    \     ██   ██ ██   ██  ██  ██  ██ ██      \n ██████  ██    ██    ██   ██  ████\
    ██  ██████         ██      ██   ██ ██   ██   ████   ██  ██████\n  \nGitHub: https://github.com/farvic\n\
    LinkedIn: https://www.linkedin.com/in/victorfa/\n-------------------------------------------------------------------------------------------------------"
  learner_created: true
- name: src/account/config/UserDetailsImpl.java
  visible: true
  text: |
    package account.config;

    import account.domain.Group;
    import account.domain.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;
    import java.util.Set;
    import java.util.stream.Collectors;

    public class UserDetailsImpl implements UserDetails {

        private User user;
        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        private final boolean accountNonLocked;

        public UserDetailsImpl(User user) {
            username = user.getEmail().toLowerCase();
            password = user.getPassword();
            rolesAndAuthorities = getAuthorities(user);
            accountNonLocked = user.isAccountNonLocked();
        }

        public User getUser() {
            return user;
        }

        public List<GrantedAuthority> getAuthorities(User user) {

            Set<Group> groups = user.getSecurityGroup();

            return groups.stream()
                    .map(group -> new SimpleGrantedAuthority(group.getRole().getDescription()))
                    .collect(Collectors.toList());
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        // 4 remaining methods that just return true
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/utils/YearMonthConverter.java
  visible: true
  text: |
    package account.utils;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;

    public class YearMonthConverter {
        public static YearMonth convert(String input) {
            String formattedInput = input;
            if (input.matches("\\d{4}-\\d{2}")) {
                formattedInput = input.substring(5) + "-" + input.substring(0, 4);
            }
            return YearMonth.parse(formattedInput, DateTimeFormatter.ofPattern("MM-yyyy"));
        }
    }
  learner_created: true
- name: src/account/controllers/AdminController.java
  visible: true
  text: |
    package account.controllers;



    import account.dto.ResponseBody;
    import account.dto.UserAccessRequest;
    import account.dto.UserDto;
    import account.dto.UserRoleRequest;

    import account.model.AccessOperation;
    import account.services.AuthServiceImpl;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.ResponseEntity;
    import org.springframework.transaction.annotation.Transactional;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;


    @RestController
    @RequestMapping("/api/admin")
    @Tag(name = "Admin", description = "Admin API")
    public class AdminController {


        private final AuthServiceImpl userService;

        public AdminController(AuthServiceImpl userService) {
            this.userService = userService;
        }

        @Operation(summary = "Get Users", description = "Get all the users", tags = {
                "Admin" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/user")
        public ResponseEntity<List<UserDto>> findAll() {
            return ResponseEntity.ok(userService.findAllUsers());
        }

        @Operation(summary = "Change user roles", description = "Add/remove roles from a user", tags = {
            "Admin" })
        @ApiResponse(responseCode = "200", description = "OK")
        @Transactional
        @PutMapping("/user/role")
        public ResponseEntity<UserDto> changeUserRoles(@Valid @RequestBody UserRoleRequest userRoleRequest) {
            return ResponseEntity.ok(userService.changeUserRole(userRoleRequest));
        }

        @Operation(summary = "Lock/unlock user access", description = "Change user access status", tags = {
                "Admin" })
        @ApiResponse(responseCode = "200", description = "OK")
        @Transactional
        @PutMapping("/user/access")
        public ResponseEntity<ResponseBody> changeUserAccessStatus(@Valid @RequestBody UserAccessRequest userAccessRequest) {

            AccessOperation access = userAccessRequest.getOperation();
            ResponseBody responseBody;

            if (access == AccessOperation.LOCK) {
                responseBody = userService.lock(userAccessRequest.getUser());
            } else {
                responseBody = userService.unlock(userAccessRequest.getUser());
            }

            return ResponseEntity.ok(responseBody);
        }

        @Operation(summary = "Delete a User", description = "Delete a User by email", tags = {
                "Admmin" })
        @ApiResponse(responseCode = "200", description = "OK")
        @DeleteMapping("/user/{email}")
        public ResponseEntity<ResponseBody> deleteUser(@PathVariable String email) {
            return ResponseEntity.ok(userService.deleteUserByEmail(email));
        }

    }
  learner_created: true
- name: src/account/model/AccessOperation.java
  visible: true
  text: |
    package account.model;

    public enum AccessOperation {
        LOCK,
        UNLOCK
    }
  learner_created: true
- name: src/account/utils/SecurityChecker.java
  visible: true
  text: |
    package account.utils;

    import java.util.ArrayList;
    import java.util.List;

    public class SecurityChecker {

        private static final List<String> breachedPasswords = new ArrayList<>();

        static {
            breachedPasswords.addAll(
                    List.of(
                            "PasswordForJanuary",
                            "PasswordForFebruary",
                            "PasswordForMarch",
                            "PasswordForApril",
                            "PasswordForMay",
                            "PasswordForJune",
                            "PasswordForJuly",
                            "PasswordForAugust",
                            "PasswordForSeptember",
                            "PasswordForOctober",
                            "PasswordForNovember",
                            "PasswordForDecember"
                    )
            );
        }

        public static boolean isBreached(String password) {
            return breachedPasswords.contains(password);
        }

    }
  learner_created: true
- name: src/account/errors/CustomControllerAdvice.java
  visible: true
  text: |
    package account.errors;

    import com.fasterxml.jackson.databind.exc.MismatchedInputException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.transaction.TransactionSystemException;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;


    import javax.servlet.http.HttpServletRequest;

    import java.time.DateTimeException;
    import java.time.LocalDateTime;

    @RestControllerAdvice
    public class CustomControllerAdvice {

        int status;
        String timestamp;
        String path;
        String message;


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(TransactionSystemException.class)
        public ResponseEntity<ErrorResponse> constraintViolationException(
                TransactionSystemException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(DateTimeException.class)
        public ResponseEntity<ErrorResponse> dateInputException(
                DateTimeException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MismatchedInputException.class)
        public ResponseEntity<ErrorResponse> mismatchedInputException(
                MismatchedInputException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getCause().getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<ErrorResponse> methodNotValidException(
                MethodArgumentNotValidException e, HttpServletRequest request) {

            status = HttpStatus.BAD_REQUEST.value();
            timestamp = LocalDateTime.now().toString();
            message = e.getFieldError().getDefaultMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            "Bad Request",
                            message,
                            path)
                    , HttpStatus.BAD_REQUEST
            );
        }

        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(UserExistsException.class)
        public ResponseEntity<ErrorResponse> handleUserExistsException(
                UserExistsException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            message = e.getMessage();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            message,
                            path)
                    , e.getStatus()
            );
        }


        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(RuntimeException.class)
        public ResponseEntity<ErrorResponse> handleUserExceptions(
                UserException e, HttpServletRequest request) {

            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getServletPath();

            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
                    );
        }

        @ExceptionHandler(Exception.class) // exception handled
        public ResponseEntity<ErrorResponse> handleExceptions(
                UserException e, HttpServletRequest request) {
            status = e.getStatus().value();
            timestamp = LocalDateTime.now().toString();
            path = request.getContextPath();
            return new ResponseEntity<>(
                    new ErrorResponse(
                            timestamp,
                            status,
                            e.getError(),
                            path)
                    , e.getStatus()
            );
        }
    }
  learner_created: true
- name: src/account/controllers/PaymentController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.services.PaymentServiceImpl;
    import account.dto.ResponseBody;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    import java.util.List;

    @RestController
    @RequestMapping("/api")
    public class PaymentController {

        private final PaymentServiceImpl paymentService;

        public PaymentController(PaymentServiceImpl paymentService) {
            this.paymentService = paymentService;
        }


        @GetMapping("/empl/payment")
        public ResponseEntity<?> getPayments(
                @RequestParam(value = "period", required = false) String period,
                @AuthenticationPrincipal UserDetails userDetails)
        {

            List<PaymentDto> payments = paymentService.getPayments(period, userDetails);
            if (period != null)
                return ResponseEntity.ok(payments.get(0));
            else
                return ResponseEntity.ok(payments);
        }

        @PostMapping("/acct/payments")
        public ResponseEntity<ResponseBody> postPayment(@Valid @RequestBody List<PaymentRequest> paymentRequest) {
            ResponseBody responseBody = paymentService.postPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

        @PutMapping("/acct/payments")
        public ResponseEntity<ResponseBody> putPayment(@Valid @RequestBody  PaymentRequest paymentRequest) {
            ResponseBody responseBody = paymentService.putPayment(paymentRequest);
            return ResponseEntity.ok(responseBody);
        }

    }
  learner_created: true
- name: src/account/services/AuthServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Event;
    import account.domain.Group;
    import account.domain.Role;
    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.dto.UserDto;
    import account.dto.UserRoleRequest;
    import account.errors.UserExistsException;
    import account.model.Log;
    import account.model.Operation;

    import account.repositories.UserRepository;
    import account.utils.SecurityChecker;
    import account.utils.UserMapper;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;


    import javax.transaction.Transactional;
    import javax.validation.Validator;

    import java.util.Arrays;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;


    @Service
    public class AuthServiceImpl implements AuthService {

        @Autowired
        private Validator validator;

        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PasswordEncoder passwordEncoder;

        final Logger LOGGER = LoggerFactory.getLogger(AuthServiceImpl.class);

        @Autowired
        private GroupServiceImpl groupService;
        @Autowired
        private EventServiceImpl eventService;

        public static final int MAX_FAILED_ATTEMPTS = 5;


        /**
         * Get all Users from the database
         *
         * @return List of Users
         *
         */
        @Override
        public List<UserDto> findAllUsers() {

            return userRepository.findAll().stream().map(UserMapper::toDto).toList();
        }

    //    /**
    //     * Find a user by id
    //     *
    //     * @param id the id of the User
    //     * @return the User
    //     * @throws UserException if the User is not found
    //     *
    //     */
    //    @Override
    //    public UserDto findUserById(Long id) {
    //        return userRepository.findById(id).orElseThrow(() -> new UserException("User not found"));
    //    }

        @Override
        public User findUserByEmail(String email) {
            return userRepository.findByEmail(email.toLowerCase()).orElseThrow(() -> new UserExistsException("Not Found",HttpStatus.NOT_FOUND,"User not found!"));
        }

        /**
         * Save a User to the database
         *
         * @param user     the name of the User
         * @return User
         * @throws UserExistsException if the User already exists
         */

        // TODO: Should create an UserRequest

        @Override
        public UserDto saveUser(User user) {

            boolean alreadyRegisteredEmail;

            if (SecurityChecker.isBreached(user.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            alreadyRegisteredEmail = userRepository.findByEmail(user.getEmail().toLowerCase()).isPresent();


            if (alreadyRegisteredEmail) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "User exist!");
            }

            user.setPassword(passwordEncoder.encode(user.getPassword()));
            user.setEmail(user.getEmail().toLowerCase());

            boolean _userExists = userRepository.findById(1).isPresent();

            Group group = groupService.getGroupByRole(_userExists ? Role.ROLE_USER : Role.ROLE_ADMINISTRATOR);

            user.getSecurityGroup().add(group);


            Event event = new Event()
                    .withAction(Log.CREATE_USER)
                    .withSubject("Anonymous")
                    .withObject(user.getEmail());


            eventService.logEvent(event);

            return UserMapper.toDto(userRepository.save(user));
        }

        /**
         * Changes the user's password
         *
         * @param changePasswordDto   User's password
         * @param userDetails       User's details
         * @return User
         */
        @Override
        public ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails) {

            ResponseBody responseBody = new ResponseBody();

            if(passwordEncoder.matches(changePasswordDto.getPassword(), userDetails.getPassword())){
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }

            User _user = findUserByEmail(userDetails.getUsername());

            if (SecurityChecker.isBreached(changePasswordDto.getPassword())) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }

            _user.setPassword(passwordEncoder.encode(changePasswordDto.getPassword()));

            userRepository.save(_user);

            responseBody.setEmail(_user.getEmail());
            responseBody.setStatus("The password has been updated successfully");

            Event event = new Event()
                    .withAction(Log.CHANGE_PASSWORD)
                    .withSubject(_user.getEmail())
                    .withObject(_user.getEmail());

            eventService.logEvent(event);

            return responseBody;
        }

        /**
         * Changes the user's role
         *
         * @param userRoleRequest   User's role
         * @return User
         */
        @Override
        public UserDto changeUserRole(UserRoleRequest userRoleRequest) {

            LOGGER.info("{} user role for user: {} to role: {}", userRoleRequest.getOperation(),userRoleRequest.getUser(), userRoleRequest.getRole());

            if (Arrays.stream(Role.values()).noneMatch(role -> role.name().equals("ROLE_" + userRoleRequest.getRole()))) {
                throw new UserExistsException("Not Found", HttpStatus.NOT_FOUND, "Role not found!");
            }

            Role roleFromRequest = Role.valueOf("ROLE_" + userRoleRequest.getRole());
            Operation operation = userRoleRequest.getOperation();

            Log action = operation == Operation.GRANT ? Log.GRANT_ROLE : Log.REMOVE_ROLE;
            String actionName = operation == Operation.GRANT ? "Grant role" : "Remove role";
            String toOrFromRole = operation == Operation.GRANT ? " to " : " from ";


            if (roleFromRequest == Role.ROLE_ADMINISTRATOR) {
                if (operation == Operation.REMOVE) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
                }
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }

            User _user = findUserByEmail(userRoleRequest.getUser());
            Set<Group> userSecurityGroups = new HashSet<>(_user.getSecurityGroup());


            if (operation == Operation.REMOVE) {

                if (userSecurityGroups.stream().noneMatch(group -> group.getRole() == roleFromRequest)) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user does not have a role!");
                }

                if (userSecurityGroups.size() == 1) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user must have at least one role!");
                }


                userSecurityGroups.removeIf(group -> group.getRole() == roleFromRequest);
            }
            else{
                if (userSecurityGroups.stream().anyMatch(group -> group.getRole() == Role.ROLE_ADMINISTRATOR)) {
                    throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
                }
                userSecurityGroups.add(groupService.getGroupByRole(roleFromRequest));

            }


            _user.setSecurityGroup(userSecurityGroups);

            String object = actionName + " " + roleFromRequest.getDescription() + toOrFromRole + _user.getEmail();



            Event event = new Event()
                    .withAction(action)
                    .withObject(object);
            eventService.logEvent(event);

            return UserMapper.toDto(userRepository.save(_user));
        }


        /**
         * Delete a User
         *
         * @param email         the email of the User
         *
         */
        @Override
        public ResponseBody deleteUserByEmail(String email) {

            ResponseBody responseBody = new ResponseBody();

            User _user = findUserByEmail(email);

            if (_user.getId() == 1) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }

            userRepository.delete(_user);

            responseBody.setUser(email);
            responseBody.setStatus("Deleted successfully!");

            Event event = new Event()
                    .withAction(Log.DELETE_USER)
                    .withObject(email);
            eventService.logEvent(event);

            return responseBody;
        }

        @Override
        @Transactional
        public void resetFailedAttempts(String username) {
            User user = this.findUserByEmail(username);
            user.setFailedLoginAttempts(0);
            userRepository.save(user);
        }

        @Override
        @Transactional
        public void increaseFailedAttempts(String username) {
            User user;

            Event event = new Event()
                    .withAction(Log.LOGIN_FAILED)
                    .withSubject(username);
            eventService.logEvent(event);

            user = this.findUserByEmail(username);

            user.setFailedLoginAttempts(user.getFailedLoginAttempts() + 1);

            if (user.getFailedLoginAttempts() >= 5) {
                Event event2 = new Event()
                        .withAction(Log.BRUTE_FORCE)
                        .withSubject(user.getEmail());
                eventService.logEvent(event2);

                if (user.getId() != 1 ) {
                    this.lock(username);
                }
            } else
                 userRepository.save(user);
        }

        @Override
        @Transactional
        public ResponseBody lock(String username) {

            ResponseBody responseBody = new ResponseBody();

            User user = this.findUserByEmail(username);

            if (user.getId() == 1) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST, "Can't lock the ADMINISTRATOR!");
            }

            user.setAccountNonLocked(false);
            userRepository.save(user);

            Event event = new Event()
                    .withAction(Log.LOCK_USER)
                    .withSubject(user.getEmail())
                    .withObject("Lock user " + user.getEmail());
            eventService.logEvent(event);

            responseBody.setStatus("User " + user.getEmail() + " locked!");

            return responseBody;
        }

        @Override
        @Transactional
        public ResponseBody unlock(String username) {

            ResponseBody responseBody = new ResponseBody();

            User user = this.findUserByEmail(username);

            user.setAccountNonLocked(true);
            user.setFailedLoginAttempts(0);
            userRepository.save(user);

            Event event = new Event()
                    .withAction(Log.UNLOCK_USER)
                    .withObject("Unlock user " + user.getEmail());

            eventService.logEvent(event);

            responseBody.setStatus("User " + user.getEmail() + " unlocked!");

            return responseBody;
        }


    }
  learner_created: true
- name: src/account/config/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.config;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(
                HttpServletRequest request,
                HttpServletResponse response,
                AuthenticationException authException) throws IOException, ServletException {

            final Logger LOGGER = LoggerFactory.getLogger(RestAuthenticationEntryPoint.class);

    //        LOGGER.info("RestAuthenticationEntryPoint: " + authException.getMessage());
    //        LOGGER.info("RestAuthenticationEntryPoint: " + authException.getLocalizedMessage());
    //        LOGGER.info("RestAuthenticationEntryPoint: " + authException.getCause());
    //        LOGGER.info("RestAuthenticationEntryPoint: " + authException.toString());


            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage()
            );
        }


    }
  learner_created: true
- name: src/account/dto/UserAccessRequest.java
  visible: true
  text: |
    package account.dto;

    import account.model.AccessOperation;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;

    public class UserAccessRequest {

        @NotEmpty(message = "User is required")
        private String user;
        @NotNull(message = "AccessOperation is required")
        private AccessOperation operation;

        public UserAccessRequest() {
        }

        public UserAccessRequest(String user, AccessOperation operation) {
            this.user = user;
            this.operation = operation;
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public AccessOperation getOperation() {
            return operation;
        }

        public void setOperation(AccessOperation operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/services/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.config.UserDetailsImpl;

    import account.domain.User;

    import account.errors.UserExistsException;
    import account.repositories.UserRepository;


    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.logging.Logger;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        final UserRepository userRepository;
        final static Logger LOGGER = Logger.getLogger(UserDetailsServiceImpl.class.getName());

        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }
        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {


            User user = userRepository.findByEmail(username.toLowerCase())
                    .orElseThrow(() -> new UsernameNotFoundException("Not found: " + username));

            if (!user.isAccountNonLocked()) {
                throw new UserExistsException("Bad Request", HttpStatus.BAD_REQUEST,"User account is locked");
            }

            return new UserDetailsImpl(user);
        }

    }
  learner_created: true
- name: src/account/config/CustomAccessDeniedHandler.java
  visible: true
  text: |
    package account.config;

    import account.domain.Event;
    import account.model.Log;
    import account.repositories.UserRepository;
    import account.services.EventServiceImpl;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        public static final Logger LOG
                = LoggerFactory.getLogger(CustomAccessDeniedHandler.class);
        private final EventServiceImpl eventService;

        @Autowired
        public CustomAccessDeniedHandler(EventServiceImpl eventService) {
            this.eventService = eventService;
        }

        @Override
        public void handle(
                HttpServletRequest request,
                HttpServletResponse response,
                AccessDeniedException exc) throws IOException, ServletException {

            Authentication auth
                    = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null) {
                LOG.warn("User: " + auth.getName()
                        + " attempted to access the protected URL: "
                        + request.getRequestURI());
            }

            Event event = new Event()
                    .withAction(Log.ACCESS_DENIED)
                    .withSubject(auth.getName());
            eventService.logEvent(event);

            response.sendError(
                    HttpServletResponse.SC_FORBIDDEN,
                    "Access Denied!");
        }
    }
  learner_created: true
- name: src/account/security/CustomLoginSuccessHandler.java
  visible: true
  text: |
    //package account.security;
    //
    //import account.config.UserDetailsImpl;
    //import account.domain.User;
    //import account.services.AuthService;
    //
    //import org.springframework.security.core.Authentication;
    //
    //import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
    //import org.springframework.stereotype.Component;
    //
    //import javax.servlet.ServletException;
    //import javax.servlet.http.HttpServletRequest;
    //import javax.servlet.http.HttpServletResponse;
    //import java.io.IOException;
    //import java.util.logging.Logger;
    //
    //@Component
    //public class CustomLoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {
    //
    //    private final AuthService authService;
    //
    //    private final static Logger LOGGER = Logger.getLogger(CustomLoginSuccessHandler.class.getName());
    //
    //    public CustomLoginSuccessHandler(AuthService authService) {
    //        this.authService = authService;
    //    }
    //
    //    @Override
    //    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
    //                                        Authentication authentication) throws IOException, ServletException {
    //        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
    //        User user = userDetails.getUser();
    //        if (user.getFailedLoginAttempts() > 0) {
    //            authService.resetFailedAttempts(user);
    //        }
    //
    //        LOGGER.info("onAuthenticationSuccess: " + user.getEmail());
    //
    //
    //        super.onAuthenticationSuccess(request, response, authentication);
    //    }
    //
    //}
  learner_created: true
- name: src/account/domain/Role.java
  visible: true
  text: |-
    package account.domain;

    public enum Role {

        ROLE_ACCOUNTANT("ACCOUNTANT"),
        ROLE_ADMINISTRATOR("ADMINISTRATOR"),
        ROLE_AUDITOR("AUDITOR"),
        ROLE_USER("USER");

        private final String description;



        Role(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/account/dto/EventDto.java
  visible: true
  text: |
    package account.dto;

    import account.model.Log;

    public record EventDto(String date, Log action, String subject, String object, String path) {
    }
  learner_created: true
- name: src/account/services/GroupService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Group;
    import account.domain.Role;

    import java.util.Optional;

    public interface GroupService {

        Group getGroupByRole(Role role);

        Group save(Group group);

    }
  learner_created: true
- name: src/account/services/GroupServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Group;
    import account.domain.Role;
    import account.errors.UserExistsException;
    import account.repositories.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.Optional;

    @Service
    public class GroupServiceImpl implements GroupService {



        private final GroupRepository groupRepository;

        @Autowired
        public GroupServiceImpl(GroupRepository groupRepository) {
            this.groupRepository = groupRepository;
        }

        @Override
        public Group getGroupByRole(Role role) {
            return groupRepository.findByRole(role).orElseThrow(
                    () -> new UserExistsException("Not Found", HttpStatus.NOT_FOUND, "Role not found!")
            );
        }

        @Override
        @Transactional
        public Group save(Group group) {
            Group groupToSave = getGroupByRole(group.getRole());
            groupToSave.setId(group.getId());
            return groupRepository.save(group);
        }
    }
  learner_created: true
- name: src/account/services/EventService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Event;
    import account.dto.EventDto;

    import java.util.List;

    public interface EventService {

        void logEvent(Event event);

        List<EventDto> findAll();

    }
  learner_created: true
- name: src/account/config/WebSecurityConfig.java
  visible: true
  text: |
    package account.config;

    import account.security.CustomLoginFailureHandler;
    import org.springframework.beans.factory.annotation.Autowired;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;

    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;

    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import static account.domain.Role.*;

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private UserDetailsService userDetailsService;

        @Autowired
        private PasswordEncoder passwordEncoder;

        @Autowired
        CustomLoginFailureHandler loginFailureHandler;





        private final AccessDeniedHandler accessDeniedHandler;

        @Autowired
        public WebSecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint, AccessDeniedHandler accessDeniedHandler) {        this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
            this.accessDeniedHandler = accessDeniedHandler;
        }
        @Override
        public void configure(HttpSecurity http) throws Exception {

            http
                    .httpBasic()
                        .authenticationEntryPoint(restAuthenticationEntryPoint)// Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                        .antMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                        .mvcMatchers("/api/auth/changepass").hasAnyAuthority(ROLE_USER.getDescription(), ROLE_ADMINISTRATOR.getDescription(), ROLE_ACCOUNTANT.getDescription())
                        .mvcMatchers("/api/empl/payment").hasAnyAuthority(ROLE_ACCOUNTANT.getDescription(), ROLE_USER.getDescription())
                        .mvcMatchers("/api/admin/**").hasAuthority(ROLE_ADMINISTRATOR.getDescription())
                      .mvcMatchers("/api/security/**").hasAuthority(ROLE_AUDITOR.getDescription())
                        .mvcMatchers("/api/acct/**").hasAuthority(ROLE_ACCOUNTANT.getDescription())
                        .mvcMatchers(HttpMethod.GET,"/api/empl/payments").hasAnyAuthority(ROLE_ACCOUNTANT.getDescription(), ROLE_USER.getDescription())
                        .mvcMatchers("/api/acct/payments").hasAuthority(ROLE_ACCOUNTANT.getDescription())
                    //.anyRequest().authenticated() // all other requests must be authenticated
                    .and()
                        .sessionManagement()
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS).
                    and()
                        .exceptionHandling()
                        .accessDeniedHandler(accessDeniedHandler);
    //                .formLogin()
    //                    .successHandler(loginSuccessHandler)
    //                    .failureHandler(loginFailureHandler); // no session
        }




        @Bean
        public DaoAuthenticationProvider authenticationProvider(){
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(passwordEncoder);
            provider.setUserDetailsService(userDetailsService);
            return provider;
        }

    }
  learner_created: true
- name: src/account/services/PaymentService.java
  visible: true
  text: |
    package account.services;


    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.List;

    public interface PaymentService {
        List<PaymentDto> getPayments(String period, UserDetails userDetails);

        ResponseBody postPayment(List<PaymentRequest> paymentRequest);

        ResponseBody putPayment(PaymentRequest paymentRequest);
    }
  learner_created: true
- name: src/account/services/PaymentServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import account.dto.PaymentRequest;
    import account.dto.ResponseBody;
    import account.errors.UserException;
    import account.repositories.PaymentRepository;
    import account.repositories.UserRepository;
    import account.utils.PaymentUtils;
    import account.utils.YearMonthConverter;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Qualifier;

    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;


    import java.time.YearMonth;
    import java.util.*;

    @Service
    public class PaymentServiceImpl implements PaymentService {


        final private PaymentRepository paymentRepository;
        final private UserRepository userRepository;

        final static Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);
        private final PaymentConversionService paymentConversionService;


        public PaymentServiceImpl(PaymentRepository paymentRepository, UserRepository userRepository, PaymentConversionService paymentConversionService) {
            this.paymentRepository = paymentRepository;
            this.userRepository = userRepository;
            this.paymentConversionService = paymentConversionService;
        }

        @Override
        public List<PaymentDto> getPayments(String period, UserDetails userDetails) {
            User user = userRepository.findByEmail(userDetails.getUsername()).orElseThrow(() -> new UserException("User not found"));

            if (period != null) {
                Payment payment = paymentRepository.findByEmployeeAndPeriod(userDetails.getUsername(), YearMonthConverter.convert(period)).orElseThrow(() -> new UserException("Payment not found"));
                return PaymentUtils.mapPaymentsToPaymentDtos(Collections.singletonList(payment), user);
            }

            List<Payment> payments = paymentRepository.findAllByEmployee(userDetails.getUsername());
            return PaymentUtils.mapPaymentsToPaymentDtos(payments, user);
        }

        @Override
        @Transactional
        public ResponseBody postPayment(List<PaymentRequest> paymentRequests) {
            ResponseBody responseBody = new ResponseBody();
            Map<String, List<Payment>> paymentMap = new HashMap<>();
            LOGGER.info("Payment requests: " + paymentRequests);

            // Check for duplicate payments for each employee
            paymentRequests.forEach(paymentRequest -> {
                Payment payment = paymentConversionService.convert(paymentRequest, Payment.class);
                if (paymentMap.containsKey(paymentRequest.getEmployee())) {
                    List<Payment> employeePayments = paymentMap.get(paymentRequest.getEmployee());
                    employeePayments.stream()
                            .filter(p -> p.getPeriod().equals(payment.getPeriod()))
                            .findFirst()
                            .ifPresent(p -> {
                                throw new UserException("Bad Request");
                            });
                    employeePayments.add(payment);
                } else {
                    List<Payment> employeePayments = new ArrayList<>();
                    employeePayments.add(payment);
                    paymentMap.put(paymentRequest.getEmployee(), employeePayments);
                }
            });

            LOGGER.info("Payments: " + paymentMap);

            // Save payments for each employee
            paymentMap.forEach((employee, employeePayments) -> {
                User user = userRepository.findByEmail(employee).orElseThrow(() -> new UserException("Bad Request"));
                LOGGER.info("Employee: " + employee + " payments: " + employeePayments);
                employeePayments.forEach(payment -> payment.setEmployee(user.getEmail()));
                paymentRepository.saveAll(employeePayments);
            });

            responseBody.setStatus("Added successfully!");
            return responseBody;
        }

        @Override
        public ResponseBody putPayment(PaymentRequest payment) {
            ResponseBody responseBody = new ResponseBody();


            User user = userRepository.findByEmail(payment.getEmployee()).orElseThrow(() -> new UserException("Employee not found"));

            YearMonth period = YearMonthConverter.convert(payment.getPeriod());

            Payment paymentFromDb = paymentRepository.
                    findByEmployeeAndPeriod(payment.getEmployee(), period)
                    .orElseThrow(() -> new UserException("Payment not found"));

            paymentFromDb.setSalary(payment.getSalary());

            paymentRepository.save(paymentFromDb);

            responseBody.setStatus("Updated successfully!");
            return responseBody;
        }




    }
  learner_created: true
- name: src/account/config/BCryptEncoderConfig.java
  visible: true
  text: |
    package account.config;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    public class BCryptEncoderConfig {
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }
    }
  learner_created: true
- name: src/account/services/AuthService.java
  visible: true
  text: |
    package account.services;

    import account.domain.User;
    import account.dto.ChangePasswordDto;
    import account.dto.ResponseBody;
    import account.dto.UserDto;
    import account.dto.UserRoleRequest;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.transaction.Transactional;
    import java.util.List;

    public interface AuthService {
        List<UserDto> findAllUsers();

    //    UserDto findUserById(Long id);

        User findUserByEmail(String email);

        UserDto saveUser(User User);

        UserDto changeUserRole(UserRoleRequest userRoleRequest);

        ResponseBody changePassword(ChangePasswordDto changePasswordDto, UserDetails userDetails);

        ResponseBody deleteUserByEmail(String email);

        @Transactional
        void resetFailedAttempts(String email);

        @Transactional
        void increaseFailedAttempts(String email);

        @Transactional
        ResponseBody lock(String username);

        @Transactional
        ResponseBody unlock(String username);
    }
  learner_created: true
- name: src/account/dto/ResponseBody.java
  visible: true
  text: "package account.dto;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\
    import com.fasterxml.jackson.annotation.JsonInclude.Include;\n\n@JsonInclude(Include.NON_NULL)\n\
    public class ResponseBody {\n    private String user;\n\n    private String email;\n\
    \    private String status;\n\n\n    public ResponseBody() {\n        \n    }\n\
    \n    public String getUser() {\n        return user;\n    }\n\n    public void\
    \ setUser(String user) {\n        this.user = user;\n    }\n\n    public String\
    \ getEmail() {\n        return email;\n    }\n\n    public void setEmail(String\
    \ email) {\n        this.email = email;\n    }\n\n    public String getStatus()\
    \ {\n        return status;\n    }\n\n    public void setStatus(String status)\
    \ {\n        this.status = status;\n    }\n}\n"
  learner_created: true
- name: src/account/dto/UserRequest.java
  visible: true
  text: |
    package account.dto;

    import account.domain.Group;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.HashSet;

    public class UserRequest {
        @NotEmpty(message = "Name is required")
        private String name;

        @NotEmpty(message = "Last name is required")
        private String lastname;
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @NotEmpty(message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @JsonIgnore
        private HashSet<Group> securityGroup = new HashSet<>();
        public UserRequest() {
        }

        public UserRequest(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
        }

        public UserRequest(String name, String lastName, String email, String password, HashSet<Group> securityGroup) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.securityGroup = securityGroup;
        }
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public HashSet<Group> getSecurityGroup() {
            return securityGroup;
        }

        public void setSecurityGroup(HashSet<Group> securityGroup) {
            this.securityGroup = securityGroup;
        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.User;

    import account.dto.UserDto;

    import org.springframework.data.jpa.repository.JpaRepository;

    import org.springframework.data.repository.query.Param;
    import org.springframework.data.rest.core.annotation.RestResource;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    //@Tag(name = "User", description = "User API")
    public interface UserRepository extends JpaRepository<User, Long> {

        /**
         *
         * Find all Users from the database
         *
         */
        List<User> findAll();

        /**
         * Find a user by id
         *
         * @param id the id of the user
         * @return the user
         */


        Optional<UserDto> findById(@Param("id") long id);


        /**
         * Save a user
         *
         * @param User the user to save
         * @return the saved user
         */

        @Override
    //     @RestResource(exported = false)
        <S extends User> S save(S User);

        @Override
        @RestResource(exported = false)
        <S extends User> List<S> saveAll(Iterable<S> users);

        // @RestResource(exported = false)
        void deleteByEmail(String email);

        @Override
    //    @RestResource(exported = false)
        void delete(User user);

        @Override
        @RestResource(exported = false)
        void deleteAll(Iterable<? extends User> users);

    //    @Query("SELECT u FROM User u WHERE u.email = :email")
        Optional<User> findByEmail(String email);
    }
  learner_created: true
- name: src/account/data/DataLoader.java
  visible: true
  text: |
    package account.data;

    import account.domain.Group;
    import account.domain.Role;
    import account.repositories.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class DataLoader {

        final private GroupRepository groupRepository;

        @Autowired
        public DataLoader(GroupRepository groupRepository) {
            this.groupRepository = groupRepository;
            createRoles();
        }

        private void createRoles() {
            try {
                groupRepository.save(new Group(Role.ROLE_ADMINISTRATOR));
                groupRepository.save(new Group(Role.ROLE_USER));
                groupRepository.save(new Group(Role.ROLE_ACCOUNTANT));
                groupRepository.save(new Group(Role.ROLE_AUDITOR));
            } catch (Exception e) {

            }
        }
    }
  learner_created: true
- name: src/account/dto/UserDto.java
  visible: true
  text: |
    package account.dto;


    public record UserDto(Long id, String name, String lastname, String email, java.util.List<String> roles) {

    }
  learner_created: true
- name: src/account/model/Operation.java
  visible: true
  text: |
    package account.model;

    public enum Operation {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/repositories/GroupRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Group;
    import account.domain.Role;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface GroupRepository extends JpaRepository<Group, Long> {
        Optional<Group> findByRole(Role role);
    }
  learner_created: true
- name: src/account/services/EventServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.domain.Event;
    import account.dto.EventDto;
    import account.repositories.EventRepository;
    import account.utils.EventMapper;

    import org.springframework.beans.factory.annotation.Qualifier;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.stereotype.Service;

    import javax.servlet.http.HttpServletRequest;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.List;




    @Service
    @Qualifier("EventService")
    public class EventServiceImpl implements EventService {
        private final EventRepository eventRepository;

        private final HttpServletRequest request;

        private static final String DATE_FORMATTER= "yyyy-MM-dd HH:mm:ss";
        private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMATTER);

        public EventServiceImpl(EventRepository eventRepository, HttpServletRequest request) {
            this.eventRepository = eventRepository;
            this.request = request;
        }

        @Override
        public void logEvent(Event event) {

            String path = request.getServletPath();

            if (event.getSubject() == null) {
                event.withSubject(SecurityContextHolder.getContext().getAuthentication().getName());
            }

            if (event.getObject() == null) {
                event.withObject(path);
            }

            event.withDate(LocalDateTime.now().format(formatter))
                    .withPath(path);
            eventRepository.save(event);
        }

        @Override
        public List<EventDto> findAll() {
            return eventRepository.findAll().stream().map(EventMapper::toDto).toList();
        }
    }
  learner_created: true
- name: src/account/domain/Payment.java
  visible: true
  text: |
    package account.domain;

    import account.utils.PaymentId;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.time.YearMonth;


    @Entity
    @Table(name = "payments")
    @IdClass(PaymentId.class)
    public class Payment {
        @Column
        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Id
        private String employee;

        @Id
        @Column
        @NotNull(message = "Period is required")
    //    @Pattern(regexp = "^(0[1-9]|1[012])-(19|20)\\d\\d$", message = "Period must be in the format MM-yyyy")
        private YearMonth period;

        @Column
        @NotNull(message = "User salary must not be empty")
        @Positive(message = "Salary must be positive")
        private Long salary;



        public Payment() {
        }

        public Payment(String employee, YearMonth period, Long salary) {
            this.employee = employee;
            this.period = period;
            this.salary = salary;
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/dto/PaymentRequest.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import java.io.Serializable;


    public class PaymentRequest implements Serializable {

        @NotNull(message = "Employee email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        private String employee;

        @NotNull(message = "Period is required")
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MM-yyyy|yyyy-MM", locale = "en")
        private String period;
        @Positive(message = "Salary must be positive")
        @NotNull(message = "User salary must not be empty")
        private Long salary;

        public PaymentRequest() {
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/model/Log.java
  visible: true
  text: |
    package account.model;

    public enum Log {
        CREATE_USER("A user has been successfully registered"),
        CHANGE_PASSWORD("A user has changed the password successfully"),
        ACCESS_DENIED("A user is trying to access a resource without access rights"),
        LOGIN_FAILED("Failed authentication"),
        GRANT_ROLE("A role is granted to a user"),
        REMOVE_ROLE("A role has been revoked"),
        LOCK_USER("The Administrator has locked the user"),
        UNLOCK_USER("The Administrator has unlocked a user"),
        DELETE_USER("The Administrator has deleted a user"),
        BRUTE_FORCE("A user has been blocked on suspicion of a brute force attack");

        private final String description;

        Log(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }

    }
  learner_created: true
- name: src/account/dto/ChangePasswordDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;

    public class ChangePasswordDto {
        @JsonProperty("new_password")
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        private String password;

        public ChangePasswordDto() {
        }

        public ChangePasswordDto(String password) {
            this.password = password;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }


    }
  learner_created: true
- name: src/account/errors/UserException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;


    public class UserException extends RuntimeException {
        private String error;
        private HttpStatus status;


        public UserException(String error) {
            this.error = error;
            this.status = HttpStatus.BAD_REQUEST;
        }

        public UserException(String error, HttpStatus status) {
            this.error = error;
            this.status = status;
        }

        public HttpStatus getStatus() {
            return status;
        }

        public void setStatus(HttpStatus status) {
            this.status = status;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

    }
  learner_created: true
- name: src/account/errors/UserExistsException.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpStatus;

    public class UserExistsException extends UserException{

        @Override
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        String message;
        public UserExistsException(String error, HttpStatus status, String message) {
            super(error, status);
            this.message = message;
        }

    }
  learner_created: true
- name: src/account/domain/Group.java
  visible: true
  text: |
    package account.domain;

    import javax.persistence.*;
    import java.util.Objects;

    @Entity
    @Table(name = "security_group")
    public class Group {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "group_id")
        private Long id;

        @Enumerated(EnumType.STRING)
        @Column(unique = true, updatable = false)
        private Role role;


        public Group() {


        }
        public Group(Role role) {
            this.role = role;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public Role getRole() {
            return role;
        }

        public void setRole(Role role) {
            this.role = role;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Group group = (Group) o;
            return getRole() == group.getRole();
        }

        @Override
        public int hashCode() {
            return Objects.hash(getRole());
        }
    }
  learner_created: true
- name: src/account/dto/PaymentDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import com.fasterxml.jackson.datatype.jsr310.deser.YearMonthDeserializer;
    import com.fasterxml.jackson.datatype.jsr310.ser.YearMonthSerializer;

    import java.time.YearMonth;

    public class PaymentDto {

        private String name;

        private String lastname;

        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MMMM-yyyy", locale = "en")
        @JsonSerialize(using = YearMonthSerializer.class)
        @JsonDeserialize(using = YearMonthDeserializer.class)
        private YearMonth period;
        private String salary;

        public PaymentDto() {
        }

        public PaymentDto(String name, String lastname, YearMonth period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }


        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }
    }
  learner_created: true
- name: src/account/domain/User.java
  visible: true
  text: |
    package account.domain;


    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.*;

    import java.util.HashSet;

    import java.util.Set;


    @Entity
    @Table(name = "user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;
        @NotEmpty(message = "Name is required")
        @Column(name = "name", nullable = false)
        private String name;

        @NotEmpty(message = "Last name is required")
        @Column(name = "last_name", nullable = false)
        private String lastname;

    //    @Email(regexp = ".*@acme\\.com",message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @NotNull(message = "Email is required")
        @Pattern(regexp = ".*@acme\\.com", message = "Email must end with @acme.com", flags = Pattern.Flag.CASE_INSENSITIVE)
        @Column(name = "email", nullable = false, unique = true)
        private String email;

        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password", nullable = false)
        private String password;

        @JsonIgnore
        @Column(name = "group")
        @ManyToMany(fetch = FetchType.EAGER)
        @JoinTable(name = "user_security_group",
                joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),
                inverseJoinColumns = @JoinColumn(name = "group_id", referencedColumnName = "group_id"))
        Set<Group> securityGroup = new HashSet<>();

        private boolean enabled;

        private boolean accountNonLocked;

        private int failedLoginAttempts;


        public User() {

        }

        public User(String name, String lastName, String email, String password) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.accountNonLocked = true;
        }

        public User(String name, String lastName, String email, String password, HashSet<Group> securityGroup) {
            this.name = name;
            this.lastname = lastName;
            this.email = email;
            this.password = password;
            this.securityGroup = securityGroup;
            this.accountNonLocked = true;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastName) {
            this.lastname = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Set<Group> getSecurityGroup() {
            return securityGroup;
        }

        public void setSecurityGroup(Set<Group> securityGroup) {
            this.securityGroup = securityGroup;
        }
        public void addSecurityGroup(Group securityGroup) {
            this.securityGroup.add(securityGroup);
        }

        public boolean isEnabled() {
            return enabled;
        }

        public void setEnabled(boolean enabled) {
            this.enabled = enabled;
        }

        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        public void setAccountNonLocked(boolean accountNonLocked) {
            this.accountNonLocked = accountNonLocked;
        }

        public int getFailedLoginAttempts() {
            return failedLoginAttempts;
        }

        public void setFailedLoginAttempts(int failedLoginAttempts) {
            this.failedLoginAttempts = failedLoginAttempts;
        }

    }
  learner_created: true
- name: src/account/repositories/EventRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Event;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EventRepository extends JpaRepository<Event, Long>{
    }
  learner_created: true
- name: src/account/security/AuthenticationFailureListener.java
  visible: true
  text: |
    package account.security;

    import account.config.UserDetailsImpl;

    import account.domain.Event;
    import account.model.Log;
    import account.services.AuthServiceImpl;
    import account.services.EventServiceImpl;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.BadCredentialsException;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.stereotype.Component;

    import java.util.logging.Logger;

    @Component
    public class AuthenticationFailureListener implements ApplicationListener<AuthenticationFailureBadCredentialsEvent> {

        private final static String ACME_MAIL = "@acme.com";

        private final static Logger LOGGER = Logger.getLogger(AuthenticationFailureListener.class.getName());
        private final AuthServiceImpl authService;
        private final EventServiceImpl eventService;

        public AuthenticationFailureListener(AuthServiceImpl authService, EventServiceImpl eventService) {
            this.authService = authService;
            this.eventService = eventService;
        }

        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent authFailureEvent) {

            String email = (String) authFailureEvent.getAuthentication().getPrincipal();

            if (!email.endsWith(ACME_MAIL)) {
                Event event = new Event()
                        .withAction(Log.LOGIN_FAILED)
                        .withSubject(email);
                eventService.logEvent(event);
                throw new BadCredentialsException("Bad credentials");
            }

            LOGGER.info("Failure: onApplicationEvent: " + email);

            authService.increaseFailedAttempts(email);
        }

    }
  learner_created: true
- name: src/account/utils/PaymentUtils.java
  visible: true
  text: |
    package account.utils;
    import account.domain.Payment;
    import account.domain.User;
    import account.dto.PaymentDto;
    import java.util.ArrayList;
    import java.util.List;

    public class PaymentUtils {

        public static List<PaymentDto> mapPaymentsToPaymentDtos(List<Payment> payments, User employee) {
            List<PaymentDto> paymentDtos = new ArrayList<>();
            for (Payment payment : payments) {
                PaymentDto paymentDto = new PaymentDto();
                paymentDto.setName(employee.getName());
                paymentDto.setLastname(employee.getLastname());
                paymentDto.setPeriod(payment.getPeriod());
                paymentDto.setSalary(formatSalary(payment.getSalary()));
                paymentDtos.add(paymentDto);
            }
            paymentDtos.sort((o1, o2) -> o2.getPeriod().compareTo(o1.getPeriod()));
            return paymentDtos;
        }

        private static String formatSalary(long salary) {
            long dollars = salary / 100;
            long cents = salary % 100;
            return String.format("%d dollar(s) %02d cent(s)", dollars, cents);
        }
    }
  learner_created: true
- name: src/account/model/EventBuilder.java
  visible: true
  text: |
    package account.model;

    import account.domain.Event;

    public class EventBuilder {

        private String date;

        private Log action;

        private String subject;

        private String object;

        private String path;

        public EventBuilder() {
        }

        public EventBuilder setDate(String date) {
            this.date = date;
            return this;
        }

        public EventBuilder setAction(Log action) {
            this.action = action;
            return this;
        }

        public EventBuilder setSubject(String subject) {
            this.subject = subject;
            return this;
        }

        public EventBuilder setObject(String object) {
            this.object = object;
            return this;
        }

        public EventBuilder setPath(String path) {
            this.path = path;
            return this;
        }

        public Event createEvent() {
            return new Event(date, action, subject, object, path);
        }


    }
  learner_created: true
- name: src/account/security/CustomLoginFailureHandler.java
  visible: true
  text: |
    package account.security;

    import account.domain.Event;
    import account.domain.User;
    import account.model.Log;
    import account.services.AuthServiceImpl;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.authentication.LockedException;
    import org.springframework.security.core.AuthenticationException;

    import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.util.Optional;

    @Component
    public class CustomLoginFailureHandler extends SimpleUrlAuthenticationFailureHandler {

        @Autowired
        private AuthServiceImpl authService;

        private final static Logger LOGGER = LoggerFactory.getLogger(CustomLoginFailureHandler.class);

        @Override
        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
                                            AuthenticationException exception) throws IOException, ServletException {

            LOGGER.info("onAuthenticationFailure: " + exception.getMessage());

            Optional<String> email = Optional.of(request.getParameter("email"));

            Event event = new Event().withAction(Log.BRUTE_FORCE).withSubject(email.orElse("Anonymous"));

            User user = authService.findUserByEmail(email.get());

            LOGGER.info("onAuthenticationFailure: " + email.get());

            if (user != null && !user.isAccountNonLocked()) {

                    exception = new LockedException("User account is locked!");


            }

    //        super.setDefaultFailureUrl("/login?error");
            super.onAuthenticationFailure(request, response, exception);
        }

    }
  learner_created: true
- name: src/account/utils/UserMapper.java
  visible: true
  text: |
    package account.utils;

    import account.domain.User;
    import account.dto.UserDto;
    import account.dto.UserRequest;
    import org.springframework.stereotype.Component;

    import java.util.List;




    @Component
    public class UserMapper {
        public static UserDto toDto(User user) {
            List<String> roles = user.getSecurityGroup().stream().map(group -> group.getRole().name()).sorted().toList();
            return new UserDto(
                    user.getId(),
                    user.getName(),
                    user.getLastname(),
                    user.getEmail(),
                    roles
            );
        }

        public static User toEntity(UserRequest userRequest) {
            User user = new User();
            user.setName(userRequest.getName());
            user.setLastname(userRequest.getLastname());
            user.setPassword(userRequest.getPassword());
            user.setEmail(userRequest.getEmail());
            user.setSecurityGroup(userRequest.getSecurityGroup());
            user.setAccountNonLocked(true);
            return user;
        }
    }
  learner_created: true
- name: src/account/repositories/PaymentRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.domain.Payment;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.time.YearMonth;
    import java.util.List;
    import java.util.Optional;


    @Repository
    public interface PaymentRepository extends JpaRepository<Payment, Long> {

        List<Payment> findAllByEmployee(String employee);
        Optional<Payment> findByEmployeeAndPeriod(String employee, YearMonth period);
    }
  learner_created: true
- name: src/account/controllers/SecurityController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.EventDto;
    import account.services.EventServiceImpl;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;

    @RestController
    @RequestMapping("/api/security")
    @Tag(name = "Security", description = "Security API")
    public class SecurityController {

        private final EventServiceImpl eventService;

        @Autowired
        public SecurityController(EventServiceImpl eventService) {
            this.eventService = eventService;
        }

        @Operation(summary = "Get Security Events", description = "Get all security events", tags = {
                "Security" })
        @ApiResponse(responseCode = "200", description = "OK")
        @GetMapping("/events")
        public ResponseEntity<List<EventDto>> findAll() {
            return ResponseEntity.ok(eventService.findAll());
        }

    }
  learner_created: true
- name: src/account/utils/EventMapper.java
  visible: true
  text: |
    package account.utils;

    import account.domain.Event;
    import account.dto.EventDto;
    import org.springframework.stereotype.Component;

    @Component
    public class EventMapper {

        public static EventDto toDto(Event event) {
            return new EventDto(
                    event.getDate(),
                    event.getAction(),
                    event.getSubject(),
                    event.getObject(),
                    event.getPath()
            );
        }

    //    public static Event toEntity(EventDto eventDto) {
    //        Event event = new Event(
    //                eventDto.getDate(),
    //                eventDto.getAction(),
    //                eventDto.getSubject(),
    //                eventDto.getObject(),
    //                eventDto.getPath()
    //        );
    ////        event.setDate(eventDto.getDate());
    ////        event.setAction(eventDto.getAction());
    ////        event.setSubject(eventDto.getSubject());
    ////        event.setObject(eventDto.getObject());
    ////        event.setPath(eventDto.getPath());
    //        return event;
    //    }

    }
  learner_created: true
- name: src/account/dto/UserRoleRequest.java
  visible: true
  text: |
    package account.dto;

    import account.domain.Role;
    import account.model.Operation;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;

    public class UserRoleRequest {

        @NotEmpty(message = "User is required")
        String user;

        @NotNull(message = "Role is required")
        String role;

        @NotNull(message = "Operation is required")
        Operation operation;

        protected UserRoleRequest() {

        }

        public UserRoleRequest(String user, String role, Operation operation) {
            this.user = user;
            this.role = role;
            this.operation = operation;
        }


        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public Operation getOperation() {
            return operation;
        }

        public void setOperation(Operation operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/utils/PaymentId.java
  visible: true
  text: |
    package account.utils;

    import java.io.Serializable;
    import java.time.YearMonth;
    import java.util.Objects;

    public class PaymentId implements Serializable {

        private String employee;

        private YearMonth period;

        public PaymentId() {
        }

        public PaymentId(String employee, YearMonth period) {
            this.employee = employee;
            this.period = period;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PaymentId paymentId = (PaymentId) o;
            return Objects.equals(employee, paymentId.employee) && Objects.equals(period, paymentId.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employee, period);
        }
    }
  learner_created: true
- name: src/account/controllers/AuthController.java
  visible: true
  text: |
    package account.controllers;


    import account.domain.User;
    import account.dto.*;
    import account.dto.ResponseBody;
    import account.services.AuthServiceImpl;
    import account.utils.UserMapper;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;

    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;

    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    @CrossOrigin(origins = "http://localhost:28852")
    @RestController
    @RequestMapping("/api")
    @Tag(name = "User", description = "User API")
    public class AuthController {

        private final AuthServiceImpl userService;

        final Logger LOGGER = LoggerFactory.getLogger(AuthController.class);

        public AuthController(AuthServiceImpl userService) {
            this.userService = userService;
        }



        @Operation(summary = "Create a User", description = "Create a User", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/signup")
        public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserRequest userRequest) {

            User user = UserMapper.toEntity(userRequest);

            return ResponseEntity.ok(userService.saveUser(user));
        }

        @Operation(summary = "Change password", description = "Changes the user's password", tags = {
                "User" })
        @ApiResponse(responseCode = "200", description = "OK")
        @PostMapping("/auth/changepass")
        public ResponseBody changePassword(@Valid @RequestBody ChangePasswordDto changePasswordDto, @AuthenticationPrincipal UserDetails userDetails) {
            return userService.changePassword(changePasswordDto, userDetails);
        }



    }
  learner_created: true
- name: src/account/security/AuthenticationSuccessListener.java
  visible: true
  text: |
    package account.security;

    import account.config.UserDetailsImpl;
    import account.services.AuthServiceImpl;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    import java.util.logging.Logger;

    @Component
    public class AuthenticationSuccessListener implements ApplicationListener<AuthenticationSuccessEvent> {

        private final AuthServiceImpl authService;

        public AuthenticationSuccessListener(AuthServiceImpl authService) {
            this.authService = authService;
        }

        @Override
        public void onApplicationEvent(AuthenticationSuccessEvent authSuccessEvent) {

            String email = authSuccessEvent.getAuthentication().getName();

            authService.resetFailedAttempts(email);
        }
    }
  learner_created: true
- name: src/account/services/PaymentConversionService.java
  visible: true
  text: |
    package account.services;

    import account.domain.Payment;
    import account.dto.PaymentRequest;
    import account.utils.YearMonthConverter;
    import org.springframework.core.convert.ConversionService;
    import org.springframework.core.convert.TypeDescriptor;
    import org.springframework.stereotype.Service;

    import java.time.YearMonth;

    @Service
    public class PaymentConversionService implements ConversionService {

        @Override
        public boolean canConvert(Class<?> sourceType, Class<?> targetType) {
            assert sourceType != null;
            return sourceType.equals(PaymentRequest.class) && targetType.equals(Payment.class);
        }

        @Override
        public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {
            return false;
        }


        @Override
        public <T> T convert(Object source, Class<T> targetType) {

            PaymentRequest paymentRequest = (PaymentRequest) source;

            String employee = paymentRequest.getEmployee();

            YearMonth period = YearMonthConverter.convert(paymentRequest.getPeriod());

            Long salary = paymentRequest.getSalary();

            return (T) new Payment(employee, period, salary);
        }

        @Override
        public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
            return null;
        }

    }
  learner_created: true
- name: src/account/domain/Event.java
  visible: true
  text: |
    package account.domain;

    import account.model.Log;

    import javax.persistence.*;
    import java.time.LocalDateTime;

    @Entity
    @Table(name = "event")
    @SequenceGenerator(name = "event_id_seq", sequenceName = "event_id_seq", allocationSize = 1)
    public class Event {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "event_id_seq")
        private Long id;

        private String date;

        private Log action;

        private String subject;

        private String object;

        private String path;

        public Event() {

        }

        public Event(String date, Log action, String subject, String object, String path) {
            this.date = date;
            this.action = action;
            this.subject = subject;
            this.object = object;
            this.path = path;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        public Log getAction() {
            return action;
        }

        public void setAction(Log action) {
            this.action = action;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }


        public Event withDate(String date) {
            this.date = date;
            return this;
        }

        public Event withAction(Log action) {
            this.action = action;
            return this;
        }

        public Event withSubject(String subject) {
            this.subject = subject;
            return this;
        }

        public Event withObject(String object) {
            this.object = object;
            return this;
        }

        public Event withPath(String path) {
            this.path = path;
            return this;
        }
    }
  learner_created: true
- name: src/account/errors/ErrorResponse.java
  visible: true
  text: |+
    package account.errors;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class ErrorResponse {
        private String timestamp;

        private int status;

        private String error;

        private String path;

        private String message;

        public ErrorResponse(String timestamp, int status, String error, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.path = path;
        }

        public ErrorResponse(String timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }


        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

  learner_created: true
- name: src/resources/keystore/service.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16607#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 04 Mar 2023 07:57:34 UTC"
record: -1

type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'javax.persistence:javax.persistence-api'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
        implementation 'com.querydsl:querydsl-jpa'
    }
  learner_created: false
- name: src/platform/repositories/CodeRepository.java
  visible: true
  text: |+
    package platform.repositories;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.stereotype.Repository;
    import platform.entities.Code;


    @Repository
    public interface CodeRepository extends JpaRepository<Code, Integer> {

        @Query("SELECT c FROM Code c WHERE c.id = ?1")
        Code getById(int id);
    }



  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    #spring.mvc.view.prefix=/task/src/resources/templates/
    #spring.mvc.view.suffix=.html

    spring.datasource.url=jdbc:h2:mem:codesharing
    #spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

    spring.jackson.property-naming-strategy=SNAKE_CASE

    # spring.jpa.show-sql=true

    spring.h2.console.enabled=true
    # localhost:8080/h2-console
    spring.h2.console.path=/h2-console

    spring.jpa.hibernate.ddl-auto=none

    spring.sql.init.data-locations=classpath:/data.sql
    spring.sql.init.schema-locations=classpath:/schema.sql

    spring.jpa.defer-datasource-initialization = true

    # spring.jpa.show-sql=true

    spring.sql.init.mode=always

    # logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=debug


    server.error.include-message = always
    # server.error.include-binding-errors = always
    # server.error.whitelabel.enabled=true
    # server.error.include-stacktrace=always

    spring.jpa.open-in-view=false
    # server.error.include-message = always
  learner_created: false
- name: src/platform/controllers/WebController.java
  visible: true
  text: |+
    package platform.controllers;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    //import org.springframework.http.MediaType;
    //import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import platform.entities.Code;
    import platform.repositories.CodeRepository;

    import java.util.List;

    @Controller
    @RequestMapping(path = "/code")
    public class WebController {

        private static final Logger LOGGER =  LoggerFactory.getLogger(CodeRepository.class);
        private final CodeRepository codeRepository;


        public WebController(CodeRepository codeRepository) {
            this.codeRepository = codeRepository;
        }

    //    @GetMapping("/{id}")
    //    public String getTextHtmlCode(@PathVariable("id") int id, Model model) {
        @GetMapping()
        public String getTextHtmlCode(Model model) {

            Code code = codeRepository.getById(1);
            LOGGER.info("Code:"+ code.getCode());

            model.addAttribute("code", code);

            return "code-view";
        }

    //    @GetMapping("/all")
    //    public String getCode(Model model) {
    //
    //        List<Code> codes = codeRepository.findAll();
    //        model.addAttribute("code", codes);
    //
    //        LOGGER.info("Get code");
    //        return "code";
    //    }

    }



  learner_created: false
- name: src/resources/schema.sql
  visible: true
  text: |-
    CREATE TABLE codes (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            code varchar(255) NOT NULL
    );

    -- CREATE table orders (
    --                         seat_id int UNIQUE NOT NULL,
    --                         token VARCHAR(36) PRIMARY KEY
    -- );
    --
    -- CREATE TABLE seats (
    --                        seat_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    --                        seat_row INT NOT NULL,
    --                        seat_column INT NOT NULL,
    --                        price INT NOT NULL,
    --                        available boolean NOT NULL,
    --                        cinema_id int NOT NULL -- room_id INT NOT NULL -- FOREIGN KEY (room_id) REFERENCES Room(id)
    -- );
    --
    --
    -- ALTER TABLE orders
    --     ADD CONSTRAINT fk_seat_id FOREIGN KEY (seat_id) REFERENCES seats(seat_id);
    --
    -- ALTER TABLE seats
    --     ADD CONSTRAINT fk_cinema_id FOREIGN KEY (cinema_id) REFERENCES cinema(id);
  learner_created: false
- name: src/platform/entities/Code.java
  visible: true
  text: |
    package platform.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    // import javax.persistence.*;

    @Entity
    @Table(name = "codes")
    public class Code {
        @Id
        @Column(name = "id")
        @JsonIgnore
        private int id;
        @Column(name = "code")
        private String code;

        public Code() {
        }

        public Code(int id, String code) {
            this.id = id;
            this.code = code;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }
    }
  learner_created: false
- name: src/resources/templates/code-view.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
        <head>
            <title>Code</title>
        </head>
        <body>
            <pre>
                <code th:text="${code.getCode()}"></code>
            </pre>
        </body>
    </html>
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (!html.contains("hljs.initHighlightingOnLoad()")) {
                return CheckResult.wrong(
                    "Can't determine if code highlighting works or not.\n" +
                    "Use \"hljs.initHighlightingOnLoad()\" inside the script tags in the HTML page.");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            String snippet = SNIPPETS[id];

            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        try {
                            Integer.parseInt(i);
                        } catch (NumberFormatException ex) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/services/CodeService.java
  visible: true
  text: |
    package platform.services;

    import platform.entities.Code;

    import java.util.List;

    public interface CodeService {

        Code findById(int id);

        void saveCode(Code code);

        List<Code> getLastTenCodes();
    }
  learner_created: true
- name: src/resources/templates/new-code.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title>Create</title>
      <link rel="stylesheet" href="/static/styles/github-dark-dimmed.min.css">
      <link rel="stylesheet" href="/styles/default.css">

    </head>
    <body>
    <header id="header">
      <div id="logo">
        <a href="/">Code Sharing Platform</a>
      </div>
      <div id="menu">
        <a href="/code/new">New</a>
        <a href="/code/latest">Latest</a>
      </div>
    </header>
    <form>
      <label for="code_snippet"></label><textarea id="code_snippet"></textarea>
      <label for="time">Time restriction:</label>
      <input type="text" id="time"><br>
      <label for="views">Views restriction:</label>
      <input type="text" id="views"><br>
      <button type="submit" id="send_snippet" onclick="send()">Submit</button>
    </form>

    <div class="footer">
      <a href="https://github.com/farvic"><i class="fa fa-github"></i></a>
      <a href="https://www.linkedin.com/in/victorfa/"><i class="fa fa-linkedin"></i></a>
    </div>
    <script type="text/javascript" src="/main.js"></script>
    <script type="text/javascript" src="/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <!-- Add font awesome icons library -->
    <script src="https://kit.fontawesome.com/your-font-awesome-kit-id.js" crossorigin="anonymous"></script>
    </body>
    </html>
  learner_created: true
- name: src/platform/services/CodeServiceImpl.java
  visible: true
  text: |+
    package platform.services;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.data.rest.webmvc.ResourceNotFoundException;
    import org.springframework.stereotype.Service;
    import platform.entities.Code;
    import platform.repositories.CodeRepository;

    import java.time.LocalDateTime;
    import java.util.List;

    @Service
    public class CodeServiceImpl implements CodeService {

        private static final Logger LOGGER = LoggerFactory.getLogger(CodeServiceImpl.class);
        private final CodeRepository codeRepository;

        public CodeServiceImpl(CodeRepository codeRepository) {
            this.codeRepository = codeRepository;
        }

        @Override
        public Code findById(int id) {
            // ChronoUnit.SECONDS.between(code.getDate(), LocalDateTime.now());
            Code code = codeRepository.findById(id)
                    .orElseThrow(() -> new ResourceNotFoundException("The code is no longer available!"));
            LOGGER.info(code.toString());

    //        if (code.isViewRestricted()) {
    //            if (code.getViews() == 0) {
    //                codeRepository.deleteById(id);
    //                throw new ResourceNotFoundException("The code is no longer available!");
    //            }
    //            code.setViews(code.getViews() - 1);
    //            codeRepository.save(code);
    //        }
    //        LOGGER.info(code.toString());
    //
    //        if (code.isTimeRestricted()) {
    //            long newTime = code.getTime() - ChronoUnit.SECONDS.between(code.getDate(), LocalDateTime.now());
    //            if (newTime <= 0) {
    //                codeRepository.deleteById(id);
    //                throw new ResourceNotFoundException("The code is no longer available!");
    //            }
    //            code.setTime(newTime);
    //        }

            return code;
        }

        @Override
        public void saveCode(Code code) {
    //        code.setId(UUID.randomUUID().toString());
            code.setDate(LocalDateTime.now());
    //        code.setTimeRestricted(code.getTime() != 0);
    //        code.setViewRestricted(code.getViews() != 0);
            codeRepository.save(code);
        }

        @Override
        public List<Code> getLastTenCodes() {
            return codeRepository.findFirst10ByOrderByDateDesc();
        }

    //    @Override
    //    public List<Code> getLastTenCodes() {
    //        return codeRepository.findFirst10ByTimeRestrictedIsFalseAndViewRestrictedIsFalseOrderByDateDesc();
    //    }
    }

  learner_created: true
- name: src/resources/static/main.js
  visible: true
  text: |-
    function send() {
        let object = {
            "code": document.getElementById("code_snippet").value,
            // "time": document.getElementById("time").value,
            // "views": document.getElementById("views").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false)
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
            alert("Success!");
        }
    }
  learner_created: true
- name: src/platform/controllers/ApiController.java
  visible: true
  text: |
    package platform.controllers;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import platform.entities.Code;
    import platform.repositories.CodeRepository;
    import platform.services.CodeServiceImpl;

    import java.util.List;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/code")
    public class ApiController {

        private static final Logger LOGGER = LoggerFactory.getLogger(CodeRepository.class);
        private final CodeServiceImpl codeService;

        public ApiController(CodeServiceImpl codeService) {
            this.codeService = codeService;
        }

    //    @GetMapping()
    //    public ResponseEntity<Code> findFirst() {
    //        Code code = codeService.findById(1);
    //        LOGGER.info(code.getCode());
    //        return ResponseEntity.ok(code);
    //    }

        @GetMapping("/{id}")
        public ResponseEntity<Code> findById(@PathVariable("id") int id) {
            Code code = codeService.findById(id);
            LOGGER.info(code.getCode());
            return ResponseEntity.ok(code);
        }

        @PostMapping(value = "/new", consumes = "application/json")
        public ResponseEntity<Map<String, String>> postTextCode(@RequestBody Code codeSnippet) {
    //    public void postTextCode(@RequestBody Code codeSnippet) {
            codeService.saveCode(codeSnippet);
            LOGGER.info("Saved code with ID: " + codeSnippet.getId());
            String id = String.valueOf(codeSnippet.getId());
    //        return ResponseEntity.ok(Map.of());
            return ResponseEntity.ok(Map.of("id", id));
        }

        @GetMapping("/latest")
        public ResponseEntity<List<Code>> getLatestCodes() {
            List<Code> codes = codeService.getLastTenCodes();
            LOGGER.info(codes.toString());
            return ResponseEntity.ok(codes);
        }

    }
  learner_created: true
- name: src/resources/static/highlight.js
  visible: true
  learner_created: true
- name: src/resources/static/highlight.min.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11030#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 20 Feb 2023 15:09:02 UTC"
record: -1

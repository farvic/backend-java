type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'javax.persistence:javax.persistence-api'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
        implementation 'com.querydsl:querydsl-jpa'
    }
  learner_created: false
- name: src/platform/repositories/CodeRepository.java
  visible: true
  text: |+
    package platform.repositories;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.stereotype.Repository;
    import platform.entities.Code;


    @Repository
    public interface CodeRepository extends JpaRepository<Code, Integer> {

        @Query("SELECT c FROM Code c WHERE c.id = ?1")
        Code getById(int id);
    }



  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    #spring.mvc.view.prefix=/task/src/resources/templates/
    #spring.mvc.view.suffix=.html

    spring.datasource.url=jdbc:h2:mem:codesharing
    #spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

    spring.jackson.property-naming-strategy=SNAKE_CASE

    # spring.jpa.show-sql=true

    spring.h2.console.enabled=true
    # localhost:8080/h2-console
    spring.h2.console.path=/h2-console

    spring.jpa.hibernate.ddl-auto=none

    spring.sql.init.data-locations=classpath:/data.sql
    spring.sql.init.schema-locations=classpath:/schema.sql

    spring.jpa.defer-datasource-initialization = true

    # spring.jpa.show-sql=true

    spring.sql.init.mode=always

    # logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=debug


    server.error.include-message = always
    # server.error.include-binding-errors = always
    # server.error.whitelabel.enabled=true
    # server.error.include-stacktrace=always

    spring.jpa.open-in-view=false
    # server.error.include-message = always
  learner_created: false
- name: src/platform/controllers/WebController.java
  visible: true
  text: |+
    package platform.controllers;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    //import org.springframework.http.MediaType;
    //import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import platform.entities.Code;
    import platform.repositories.CodeRepository;

    import java.util.List;

    @Controller
    @RequestMapping(path = "/code")
    public class WebController {

        private static final Logger LOGGER =  LoggerFactory.getLogger(CodeRepository.class);
        private final CodeRepository codeRepository;


        public WebController(CodeRepository codeRepository) {
            this.codeRepository = codeRepository;
        }

    //    @GetMapping("/{id}")
    //    public String getTextHtmlCode(@PathVariable("id") int id, Model model) {
        @GetMapping()
        public String getTextHtmlCode(Model model) {

            Code code = codeRepository.getById(1);
            LOGGER.info("Code:"+ code.getCode());

            model.addAttribute("code", code);

            return "code-view";
        }

    //    @GetMapping("/all")
    //    public String getCode(Model model) {
    //
    //        List<Code> codes = codeRepository.findAll();
    //        model.addAttribute("code", codes);
    //
    //        LOGGER.info("Get code");
    //        return "code";
    //    }

    }



  learner_created: false
- name: src/resources/data.sql
  visible: true
  text: |-
    INSERT INTO
        codes (code)
    VALUES
        ('public static void main(String[] args) {
        SpringApplication.run(CodeSharingPlatform.class, args);
    }');
  learner_created: false
- name: src/resources/schema.sql
  visible: true
  text: |-
    CREATE TABLE codes (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            code varchar(255) NOT NULL
    );

    -- CREATE table orders (
    --                         seat_id int UNIQUE NOT NULL,
    --                         token VARCHAR(36) PRIMARY KEY
    -- );
    --
    -- CREATE TABLE seats (
    --                        seat_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    --                        seat_row INT NOT NULL,
    --                        seat_column INT NOT NULL,
    --                        price INT NOT NULL,
    --                        available boolean NOT NULL,
    --                        cinema_id int NOT NULL -- room_id INT NOT NULL -- FOREIGN KEY (room_id) REFERENCES Room(id)
    -- );
    --
    --
    -- ALTER TABLE orders
    --     ADD CONSTRAINT fk_seat_id FOREIGN KEY (seat_id) REFERENCES seats(seat_id);
    --
    -- ALTER TABLE seats
    --     ADD CONSTRAINT fk_cinema_id FOREIGN KEY (cinema_id) REFERENCES cinema(id);
  learner_created: false
- name: src/platform/entities/Code.java
  visible: true
  text: |
    package platform.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    // import javax.persistence.*;

    @Entity
    @Table(name = "codes")
    public class Code {
        @Id
        @Column(name = "id")
        @JsonIgnore
        private int id;
        @Column(name = "code")
        private String code;

        public Code() {
        }

        public Code(int id, String code) {
            this.id = id;
            this.code = code;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }
    }
  learner_created: false
- name: src/resources/templates/code-view.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
        <head>
            <title>Code</title>
        </head>
        <body>
            <pre>
                <code th:text="${code.getCode()}"></code>
            </pre>
        </body>
    </html>
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class);
        }

        final String API_CODE = "/api/code";
        final String WEB_CODE = "/code";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ..."
        };

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element checkSingleTag(Document doc, String url, String tag) {
            Elements elems = checkElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements checkElemsByTag(Document doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Document doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,
            this::checkWebCodeNew,

            () -> postSnippet(SNIPPETS[0]),
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,

            () -> postSnippet(SNIPPETS[1]),
            this::getApiCode,
            this::checkApiCode,
            this::checkWebCode,
        };


        String apiSnippetCode;
        String apiSnippetDate;

        private CheckResult getApiCode() {
            HttpResponse resp = get(API_CODE).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", isString(value -> {
                        if (apiSnippetCode == null) {
                            apiSnippetCode = value;
                            return true;
                        }
                        return apiSnippetCode.equals(value);
                    }))
                    .value("date", isString(value -> {
                        apiSnippetDate = value;
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode() {
            HttpResponse resp = get(API_CODE).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", isString(value -> apiSnippetCode.equals(value)))
                    .value("date", isString(value -> apiSnippetDate.equals(value)))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode() {
            HttpResponse resp = get(WEB_CODE).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE, "Code");

            Element pre = getById(doc, WEB_CODE, "code_snippet", "pre");
            String webSnippetCode = pre.text();
            if (!webSnippetCode.trim().equals(apiSnippetCode.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, WEB_CODE, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiSnippetDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(String snippet) {
            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(isObject());
            apiSnippetCode = snippet;
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/resources/templates/new-code.html
  visible: true
  learner_created: true
- name: src/resources/static/main.js
  visible: true
  learner_created: true
- name: src/platform/controllers/ApiController.java
  visible: true
  learner_created: true
- name: src/platform/services/CodeService.java
  visible: true
  learner_created: true
- name: src/platform/services/CodeServiceImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11028#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 20 Feb 2023 14:37:29 UTC"
record: 2
